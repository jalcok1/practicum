
TASK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800200  00800200  00000ec8  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b1  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a7  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000be  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e4  00000000  00000000  00001967  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000234c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019c  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__vector_5>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  68:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  6c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  70:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  74:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  78:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  7c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  80:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  84:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  8c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  90:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  94:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  98:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  9c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  a0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  a4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  a8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  ac:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  b0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  b4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  b8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  bc:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  c0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  c4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  c8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  cc:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  d0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  d4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  d8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  dc:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  e0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  e4:	79 05       	cpc	r23, r9
  e6:	83 05       	cpc	r24, r3
  e8:	8d 05       	cpc	r24, r13
  ea:	97 05       	cpc	r25, r7
  ec:	a1 05       	cpc	r26, r1
  ee:	ab 05       	cpc	r26, r11
  f0:	b5 05       	cpc	r27, r5
  f2:	bf 05       	cpc	r27, r15
  f4:	c9 05       	cpc	r28, r9
  f6:	d3 05       	cpc	r29, r3
  f8:	dd 05       	cpc	r29, r13
  fa:	e7 05       	cpc	r30, r7
  fc:	f1 05       	cpc	r31, r1
  fe:	fb 05       	cpc	r31, r11
 100:	05 06       	cpc	r0, r21
 102:	0f 06       	cpc	r0, r31
 104:	19 06       	cpc	r1, r25
 106:	23 06       	cpc	r2, r19
 108:	2d 06       	cpc	r2, r29
 10a:	37 06       	cpc	r3, r23
 10c:	41 06       	cpc	r4, r17
 10e:	4b 06       	cpc	r4, r27
 110:	55 06       	cpc	r5, r21
 112:	5f 06       	cpc	r5, r31

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf ef       	ldi	r28, 0xFF	; 255
 11a:	d1 e2       	ldi	r29, 0x21	; 33
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
 124:	12 e0       	ldi	r17, 0x02	; 2
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b2 e0       	ldi	r27, 0x02	; 2
 12a:	e4 e5       	ldi	r30, 0x54	; 84
 12c:	fe e0       	ldi	r31, 0x0E	; 14
 12e:	02 c0       	rjmp	.+4      	; 0x134 <.do_copy_data_start>

00000130 <.do_copy_data_loop>:
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0

00000134 <.do_copy_data_start>:
 134:	a0 30       	cpi	r26, 0x00	; 0
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <.do_copy_data_loop>

0000013a <__do_clear_bss>:
 13a:	12 e0       	ldi	r17, 0x02	; 2
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b2 e0       	ldi	r27, 0x02	; 2
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	a2 30       	cpi	r26, 0x02	; 2
 146:	b1 07       	cpc	r27, r17
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 08 07 	call	0xe10	; 0xe10 <main>
 14e:	0c 94 29 07 	jmp	0xe52	; 0xe52 <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <Configure_Interrupt>:
 *         rise an interrupt request.
 *  \param INT_NO	The interrupt for which configuration has to be setup.
 *  \param INT_MODE	The sensing mode of the INT_NO.
 */
void Configure_Interrupt(uint8_t INT_NO, uint8_t INT_MODE)
{
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	0f 92       	push	r0
 15c:	0f 92       	push	r0
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	6a 83       	std	Y+2, r22	; 0x02
	switch(INT_NO){
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	91 05       	cpc	r25, r1
 170:	09 f4       	brne	.+2      	; 0x174 <Configure_Interrupt+0x1e>
 172:	dc c0       	rjmp	.+440    	; 0x32c <Configure_Interrupt+0x1d6>
 174:	84 30       	cpi	r24, 0x04	; 4
 176:	91 05       	cpc	r25, r1
 178:	5c f4       	brge	.+22     	; 0x190 <Configure_Interrupt+0x3a>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	91 05       	cpc	r25, r1
 17e:	09 f4       	brne	.+2      	; 0x182 <Configure_Interrupt+0x2c>
 180:	57 c0       	rjmp	.+174    	; 0x230 <Configure_Interrupt+0xda>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	91 05       	cpc	r25, r1
 186:	0c f0       	brlt	.+2      	; 0x18a <Configure_Interrupt+0x34>
 188:	92 c0       	rjmp	.+292    	; 0x2ae <Configure_Interrupt+0x158>
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	91 f0       	breq	.+36     	; 0x1b2 <Configure_Interrupt+0x5c>
		case 3:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|1<<ISC70);
			break;
		default:break;
		}
		break;
	default:break;
 18e:	08 c2       	rjmp	.+1040   	; 0x5a0 <Configure_Interrupt+0x44a>
 *  \param INT_NO	The interrupt for which configuration has to be setup.
 *  \param INT_MODE	The sensing mode of the INT_NO.
 */
void Configure_Interrupt(uint8_t INT_NO, uint8_t INT_MODE)
{
	switch(INT_NO){
 190:	85 30       	cpi	r24, 0x05	; 5
 192:	91 05       	cpc	r25, r1
 194:	09 f4       	brne	.+2      	; 0x198 <Configure_Interrupt+0x42>
 196:	48 c1       	rjmp	.+656    	; 0x428 <Configure_Interrupt+0x2d2>
 198:	85 30       	cpi	r24, 0x05	; 5
 19a:	91 05       	cpc	r25, r1
 19c:	0c f4       	brge	.+2      	; 0x1a0 <Configure_Interrupt+0x4a>
 19e:	05 c1       	rjmp	.+522    	; 0x3aa <Configure_Interrupt+0x254>
 1a0:	86 30       	cpi	r24, 0x06	; 6
 1a2:	91 05       	cpc	r25, r1
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <Configure_Interrupt+0x52>
 1a6:	7f c1       	rjmp	.+766    	; 0x4a6 <Configure_Interrupt+0x350>
 1a8:	87 30       	cpi	r24, 0x07	; 7
 1aa:	91 05       	cpc	r25, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <Configure_Interrupt+0x5a>
 1ae:	ba c1       	rjmp	.+884    	; 0x524 <Configure_Interrupt+0x3ce>
		case 3:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|1<<ISC70);
			break;
		default:break;
		}
		break;
	default:break;
 1b0:	f7 c1       	rjmp	.+1006   	; 0x5a0 <Configure_Interrupt+0x44a>
 *  \param INT_MODE	The sensing mode of the INT_NO.
 */
void Configure_Interrupt(uint8_t INT_NO, uint8_t INT_MODE)
{
	switch(INT_NO){
	case 0: switch(INT_MODE){
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 05       	cpc	r25, r1
 1bc:	b9 f0       	breq	.+46     	; 0x1ec <Configure_Interrupt+0x96>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	91 05       	cpc	r25, r1
 1c2:	1c f4       	brge	.+6      	; 0x1ca <Configure_Interrupt+0x74>
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <Configure_Interrupt+0x82>
 1c8:	31 c0       	rjmp	.+98     	; 0x22c <Configure_Interrupt+0xd6>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	91 05       	cpc	r25, r1
 1ce:	c9 f0       	breq	.+50     	; 0x202 <Configure_Interrupt+0xac>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f1       	breq	.+66     	; 0x218 <Configure_Interrupt+0xc2>
 1d6:	2a c0       	rjmp	.+84     	; 0x22c <Configure_Interrupt+0xd6>
		case 0:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(0<<ISC01|0<<ISC00);
 1d8:	89 e6       	ldi	r24, 0x69	; 105
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	29 e6       	ldi	r18, 0x69	; 105
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	2c 7f       	andi	r18, 0xFC	; 252
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
			break;
 1ea:	21 c0       	rjmp	.+66     	; 0x22e <Configure_Interrupt+0xd8>
		case 1:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(0<<ISC01|1<<ISC00);
 1ec:	89 e6       	ldi	r24, 0x69	; 105
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	29 e6       	ldi	r18, 0x69	; 105
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	2c 7f       	andi	r18, 0xFC	; 252
 1fa:	21 60       	ori	r18, 0x01	; 1
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
			break;
 200:	16 c0       	rjmp	.+44     	; 0x22e <Configure_Interrupt+0xd8>
		case 2:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(1<<ISC01|0<<ISC00);
 202:	89 e6       	ldi	r24, 0x69	; 105
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	29 e6       	ldi	r18, 0x69	; 105
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	20 81       	ld	r18, Z
 20e:	2c 7f       	andi	r18, 0xFC	; 252
 210:	22 60       	ori	r18, 0x02	; 2
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
			break;
 216:	0b c0       	rjmp	.+22     	; 0x22e <Configure_Interrupt+0xd8>
		case 3:EICRA=(EICRA&(~(1<<ISC01|1<<ISC00)))|(1<<ISC01|1<<ISC00);
 218:	89 e6       	ldi	r24, 0x69	; 105
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	29 e6       	ldi	r18, 0x69	; 105
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	23 60       	ori	r18, 0x03	; 3
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
			break;
 22a:	01 c0       	rjmp	.+2      	; 0x22e <Configure_Interrupt+0xd8>
		default:break;
 22c:	00 00       	nop
		}
		break;
 22e:	b8 c1       	rjmp	.+880    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 1: switch(INT_MODE){
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	b9 f0       	breq	.+46     	; 0x26a <Configure_Interrupt+0x114>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	91 05       	cpc	r25, r1
 240:	1c f4       	brge	.+6      	; 0x248 <Configure_Interrupt+0xf2>
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	41 f0       	breq	.+16     	; 0x256 <Configure_Interrupt+0x100>
 246:	31 c0       	rjmp	.+98     	; 0x2aa <Configure_Interrupt+0x154>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	91 05       	cpc	r25, r1
 24c:	c9 f0       	breq	.+50     	; 0x280 <Configure_Interrupt+0x12a>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	91 05       	cpc	r25, r1
 252:	09 f1       	breq	.+66     	; 0x296 <Configure_Interrupt+0x140>
 254:	2a c0       	rjmp	.+84     	; 0x2aa <Configure_Interrupt+0x154>
		case 0:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(0<<ISC11|0<<ISC10);
 256:	89 e6       	ldi	r24, 0x69	; 105
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	29 e6       	ldi	r18, 0x69	; 105
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	f9 01       	movw	r30, r18
 260:	20 81       	ld	r18, Z
 262:	23 7f       	andi	r18, 0xF3	; 243
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
			break;
 268:	21 c0       	rjmp	.+66     	; 0x2ac <Configure_Interrupt+0x156>
		case 1:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(0<<ISC11|1<<ISC10);
 26a:	89 e6       	ldi	r24, 0x69	; 105
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	29 e6       	ldi	r18, 0x69	; 105
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	23 7f       	andi	r18, 0xF3	; 243
 278:	24 60       	ori	r18, 0x04	; 4
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
			break;
 27e:	16 c0       	rjmp	.+44     	; 0x2ac <Configure_Interrupt+0x156>
		case 2:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(1<<ISC11|0<<ISC10);
 280:	89 e6       	ldi	r24, 0x69	; 105
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	29 e6       	ldi	r18, 0x69	; 105
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	20 81       	ld	r18, Z
 28c:	23 7f       	andi	r18, 0xF3	; 243
 28e:	28 60       	ori	r18, 0x08	; 8
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
			break;
 294:	0b c0       	rjmp	.+22     	; 0x2ac <Configure_Interrupt+0x156>
		case 3:EICRA=(EICRA&(~(1<<ISC11|1<<ISC10)))|(1<<ISC11|1<<ISC10);
 296:	89 e6       	ldi	r24, 0x69	; 105
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	29 e6       	ldi	r18, 0x69	; 105
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	2c 60       	ori	r18, 0x0C	; 12
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
			break;
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <Configure_Interrupt+0x156>
		default:break;
 2aa:	00 00       	nop
		}
		break;
 2ac:	79 c1       	rjmp	.+754    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 2: switch(INT_MODE){
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	91 05       	cpc	r25, r1
 2b8:	b9 f0       	breq	.+46     	; 0x2e8 <Configure_Interrupt+0x192>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	91 05       	cpc	r25, r1
 2be:	1c f4       	brge	.+6      	; 0x2c6 <Configure_Interrupt+0x170>
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <Configure_Interrupt+0x17e>
 2c4:	31 c0       	rjmp	.+98     	; 0x328 <Configure_Interrupt+0x1d2>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	91 05       	cpc	r25, r1
 2ca:	c9 f0       	breq	.+50     	; 0x2fe <Configure_Interrupt+0x1a8>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	91 05       	cpc	r25, r1
 2d0:	09 f1       	breq	.+66     	; 0x314 <Configure_Interrupt+0x1be>
 2d2:	2a c0       	rjmp	.+84     	; 0x328 <Configure_Interrupt+0x1d2>
		case 0:EICRA=(EICRA&(~(1<<ISC21|1<<ISC20)))|(0<<ISC21|0<<ISC20);
 2d4:	89 e6       	ldi	r24, 0x69	; 105
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	29 e6       	ldi	r18, 0x69	; 105
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	f9 01       	movw	r30, r18
 2de:	20 81       	ld	r18, Z
 2e0:	2f 7c       	andi	r18, 0xCF	; 207
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
			break;
 2e6:	21 c0       	rjmp	.+66     	; 0x32a <Configure_Interrupt+0x1d4>
		case 1:EICRA=(EICRA&(~(1<<ISC21|1<<ISC20)))|(0<<ISC21|1<<ISC20);
 2e8:	89 e6       	ldi	r24, 0x69	; 105
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	29 e6       	ldi	r18, 0x69	; 105
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	2f 7c       	andi	r18, 0xCF	; 207
 2f6:	20 61       	ori	r18, 0x10	; 16
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
			break;
 2fc:	16 c0       	rjmp	.+44     	; 0x32a <Configure_Interrupt+0x1d4>
		case 2:EICRA=(EICRA&(~(1<<ISC21|1<<ISC20)))|(1<<ISC21|0<<ISC20);
 2fe:	89 e6       	ldi	r24, 0x69	; 105
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	29 e6       	ldi	r18, 0x69	; 105
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	f9 01       	movw	r30, r18
 308:	20 81       	ld	r18, Z
 30a:	2f 7c       	andi	r18, 0xCF	; 207
 30c:	20 62       	ori	r18, 0x20	; 32
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
			break;
 312:	0b c0       	rjmp	.+22     	; 0x32a <Configure_Interrupt+0x1d4>
		case 3:EICRA=(EICRA&(~(1<<ISC21|1<<ISC20)))|(1<<ISC21|1<<ISC20);
 314:	89 e6       	ldi	r24, 0x69	; 105
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	29 e6       	ldi	r18, 0x69	; 105
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	20 63       	ori	r18, 0x30	; 48
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
			break;
 326:	01 c0       	rjmp	.+2      	; 0x32a <Configure_Interrupt+0x1d4>
		default:break;
 328:	00 00       	nop
		}
		break;
 32a:	3a c1       	rjmp	.+628    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 3: switch(INT_MODE){
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	91 05       	cpc	r25, r1
 336:	b9 f0       	breq	.+46     	; 0x366 <Configure_Interrupt+0x210>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	91 05       	cpc	r25, r1
 33c:	1c f4       	brge	.+6      	; 0x344 <Configure_Interrupt+0x1ee>
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	41 f0       	breq	.+16     	; 0x352 <Configure_Interrupt+0x1fc>
 342:	31 c0       	rjmp	.+98     	; 0x3a6 <Configure_Interrupt+0x250>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	91 05       	cpc	r25, r1
 348:	c9 f0       	breq	.+50     	; 0x37c <Configure_Interrupt+0x226>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	91 05       	cpc	r25, r1
 34e:	09 f1       	breq	.+66     	; 0x392 <Configure_Interrupt+0x23c>
 350:	2a c0       	rjmp	.+84     	; 0x3a6 <Configure_Interrupt+0x250>
		case 0:EICRA=(EICRA&(~(1<<ISC31|1<<ISC30)))|(0<<ISC31|0<<ISC30);
 352:	89 e6       	ldi	r24, 0x69	; 105
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	29 e6       	ldi	r18, 0x69	; 105
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	2f 73       	andi	r18, 0x3F	; 63
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
			break;
 364:	21 c0       	rjmp	.+66     	; 0x3a8 <Configure_Interrupt+0x252>
		case 1:EICRA=(EICRA&(~(1<<ISC31|1<<ISC30)))|(0<<ISC31|1<<ISC30);
 366:	89 e6       	ldi	r24, 0x69	; 105
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	29 e6       	ldi	r18, 0x69	; 105
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	2f 73       	andi	r18, 0x3F	; 63
 374:	20 64       	ori	r18, 0x40	; 64
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
			break;
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <Configure_Interrupt+0x252>
		case 2:EICRA=(EICRA&(~(1<<ISC31|1<<ISC30)))|(1<<ISC31|0<<ISC30);
 37c:	89 e6       	ldi	r24, 0x69	; 105
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	29 e6       	ldi	r18, 0x69	; 105
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	20 81       	ld	r18, Z
 388:	2f 73       	andi	r18, 0x3F	; 63
 38a:	20 68       	ori	r18, 0x80	; 128
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
			break;
 390:	0b c0       	rjmp	.+22     	; 0x3a8 <Configure_Interrupt+0x252>
		case 3:EICRA=(EICRA&(~(1<<ISC31|1<<ISC30)))|(1<<ISC31|1<<ISC30);
 392:	89 e6       	ldi	r24, 0x69	; 105
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	29 e6       	ldi	r18, 0x69	; 105
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	20 6c       	ori	r18, 0xC0	; 192
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
			break;
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <Configure_Interrupt+0x252>
		default:break;
 3a6:	00 00       	nop
		}
		break;
 3a8:	fb c0       	rjmp	.+502    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 4: switch(INT_MODE){
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	91 05       	cpc	r25, r1
 3b4:	b9 f0       	breq	.+46     	; 0x3e4 <Configure_Interrupt+0x28e>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	91 05       	cpc	r25, r1
 3ba:	1c f4       	brge	.+6      	; 0x3c2 <Configure_Interrupt+0x26c>
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	41 f0       	breq	.+16     	; 0x3d0 <Configure_Interrupt+0x27a>
 3c0:	31 c0       	rjmp	.+98     	; 0x424 <Configure_Interrupt+0x2ce>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	91 05       	cpc	r25, r1
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <Configure_Interrupt+0x2a4>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	91 05       	cpc	r25, r1
 3cc:	09 f1       	breq	.+66     	; 0x410 <Configure_Interrupt+0x2ba>
 3ce:	2a c0       	rjmp	.+84     	; 0x424 <Configure_Interrupt+0x2ce>
		case 0:EICRB=(EICRB&(~(1<<ISC41|1<<ISC40)))|(0<<ISC41|0<<ISC40);
 3d0:	8a e6       	ldi	r24, 0x6A	; 106
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	2a e6       	ldi	r18, 0x6A	; 106
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f9 01       	movw	r30, r18
 3da:	20 81       	ld	r18, Z
 3dc:	2c 7f       	andi	r18, 0xFC	; 252
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
			break;
 3e2:	21 c0       	rjmp	.+66     	; 0x426 <Configure_Interrupt+0x2d0>
		case 1:EICRB=(EICRB&(~(1<<ISC41|1<<ISC40)))|(0<<ISC41|1<<ISC40);
 3e4:	8a e6       	ldi	r24, 0x6A	; 106
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2a e6       	ldi	r18, 0x6A	; 106
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	2c 7f       	andi	r18, 0xFC	; 252
 3f2:	21 60       	ori	r18, 0x01	; 1
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
			break;
 3f8:	16 c0       	rjmp	.+44     	; 0x426 <Configure_Interrupt+0x2d0>
		case 2:EICRB=(EICRB&(~(1<<ISC41|1<<ISC40)))|(1<<ISC41|0<<ISC40);
 3fa:	8a e6       	ldi	r24, 0x6A	; 106
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	2a e6       	ldi	r18, 0x6A	; 106
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	f9 01       	movw	r30, r18
 404:	20 81       	ld	r18, Z
 406:	2c 7f       	andi	r18, 0xFC	; 252
 408:	22 60       	ori	r18, 0x02	; 2
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
			break;
 40e:	0b c0       	rjmp	.+22     	; 0x426 <Configure_Interrupt+0x2d0>
		case 3:EICRB=(EICRB&(~(1<<ISC41|1<<ISC40)))|(1<<ISC41|1<<ISC40);
 410:	8a e6       	ldi	r24, 0x6A	; 106
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	2a e6       	ldi	r18, 0x6A	; 106
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	23 60       	ori	r18, 0x03	; 3
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
			break;
 422:	01 c0       	rjmp	.+2      	; 0x426 <Configure_Interrupt+0x2d0>
		default:break;
 424:	00 00       	nop
		}
		break;
 426:	bc c0       	rjmp	.+376    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 5: switch(INT_MODE){
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	91 05       	cpc	r25, r1
 432:	b9 f0       	breq	.+46     	; 0x462 <Configure_Interrupt+0x30c>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	91 05       	cpc	r25, r1
 438:	1c f4       	brge	.+6      	; 0x440 <Configure_Interrupt+0x2ea>
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	41 f0       	breq	.+16     	; 0x44e <Configure_Interrupt+0x2f8>
 43e:	31 c0       	rjmp	.+98     	; 0x4a2 <Configure_Interrupt+0x34c>
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	91 05       	cpc	r25, r1
 444:	c9 f0       	breq	.+50     	; 0x478 <Configure_Interrupt+0x322>
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	91 05       	cpc	r25, r1
 44a:	09 f1       	breq	.+66     	; 0x48e <Configure_Interrupt+0x338>
 44c:	2a c0       	rjmp	.+84     	; 0x4a2 <Configure_Interrupt+0x34c>
		case 0:EICRB=(EICRB&(~(1<<ISC51|1<<ISC50)))|(0<<ISC51|0<<ISC50);
 44e:	8a e6       	ldi	r24, 0x6A	; 106
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	2a e6       	ldi	r18, 0x6A	; 106
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	f9 01       	movw	r30, r18
 458:	20 81       	ld	r18, Z
 45a:	23 7f       	andi	r18, 0xF3	; 243
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
			break;
 460:	21 c0       	rjmp	.+66     	; 0x4a4 <Configure_Interrupt+0x34e>
		case 1:EICRB=(EICRB&(~(1<<ISC51|1<<ISC50)))|(0<<ISC51|1<<ISC50);
 462:	8a e6       	ldi	r24, 0x6A	; 106
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	2a e6       	ldi	r18, 0x6A	; 106
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	23 7f       	andi	r18, 0xF3	; 243
 470:	24 60       	ori	r18, 0x04	; 4
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
			break;
 476:	16 c0       	rjmp	.+44     	; 0x4a4 <Configure_Interrupt+0x34e>
		case 2:EICRB=(EICRB&(~(1<<ISC51|1<<ISC50)))|(1<<ISC51|0<<ISC50);
 478:	8a e6       	ldi	r24, 0x6A	; 106
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	2a e6       	ldi	r18, 0x6A	; 106
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	f9 01       	movw	r30, r18
 482:	20 81       	ld	r18, Z
 484:	23 7f       	andi	r18, 0xF3	; 243
 486:	28 60       	ori	r18, 0x08	; 8
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
			break;
 48c:	0b c0       	rjmp	.+22     	; 0x4a4 <Configure_Interrupt+0x34e>
		case 3:EICRB=(EICRB&(~(1<<ISC51|1<<ISC50)))|(1<<ISC51|1<<ISC50);
 48e:	8a e6       	ldi	r24, 0x6A	; 106
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	2a e6       	ldi	r18, 0x6A	; 106
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	f9 01       	movw	r30, r18
 498:	20 81       	ld	r18, Z
 49a:	2c 60       	ori	r18, 0x0C	; 12
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
			break;
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <Configure_Interrupt+0x34e>
		default:break;
 4a2:	00 00       	nop
		}
		break;
 4a4:	7d c0       	rjmp	.+250    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 6: switch(INT_MODE){
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	91 05       	cpc	r25, r1
 4b0:	b9 f0       	breq	.+46     	; 0x4e0 <Configure_Interrupt+0x38a>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	91 05       	cpc	r25, r1
 4b6:	1c f4       	brge	.+6      	; 0x4be <Configure_Interrupt+0x368>
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	41 f0       	breq	.+16     	; 0x4cc <Configure_Interrupt+0x376>
 4bc:	31 c0       	rjmp	.+98     	; 0x520 <Configure_Interrupt+0x3ca>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	91 05       	cpc	r25, r1
 4c2:	c9 f0       	breq	.+50     	; 0x4f6 <Configure_Interrupt+0x3a0>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	91 05       	cpc	r25, r1
 4c8:	09 f1       	breq	.+66     	; 0x50c <Configure_Interrupt+0x3b6>
 4ca:	2a c0       	rjmp	.+84     	; 0x520 <Configure_Interrupt+0x3ca>
		case 0:EICRB=(EICRB&(~(1<<ISC61|1<<ISC60)))|(0<<ISC61|0<<ISC60);
 4cc:	8a e6       	ldi	r24, 0x6A	; 106
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2a e6       	ldi	r18, 0x6A	; 106
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	20 81       	ld	r18, Z
 4d8:	2f 7c       	andi	r18, 0xCF	; 207
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
			break;
 4de:	21 c0       	rjmp	.+66     	; 0x522 <Configure_Interrupt+0x3cc>
		case 1:EICRB=(EICRB&(~(1<<ISC61|1<<ISC60)))|(0<<ISC61|1<<ISC60);
 4e0:	8a e6       	ldi	r24, 0x6A	; 106
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	2a e6       	ldi	r18, 0x6A	; 106
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	f9 01       	movw	r30, r18
 4ea:	20 81       	ld	r18, Z
 4ec:	2f 7c       	andi	r18, 0xCF	; 207
 4ee:	20 61       	ori	r18, 0x10	; 16
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
			break;
 4f4:	16 c0       	rjmp	.+44     	; 0x522 <Configure_Interrupt+0x3cc>
		case 2:EICRB=(EICRB&(~(1<<ISC61|1<<ISC60)))|(1<<ISC61|0<<ISC60);
 4f6:	8a e6       	ldi	r24, 0x6A	; 106
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	2a e6       	ldi	r18, 0x6A	; 106
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	2f 7c       	andi	r18, 0xCF	; 207
 504:	20 62       	ori	r18, 0x20	; 32
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
			break;
 50a:	0b c0       	rjmp	.+22     	; 0x522 <Configure_Interrupt+0x3cc>
		case 3:EICRB=(EICRB&(~(1<<ISC61|1<<ISC60)))|(1<<ISC61|1<<ISC60);
 50c:	8a e6       	ldi	r24, 0x6A	; 106
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	2a e6       	ldi	r18, 0x6A	; 106
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	20 81       	ld	r18, Z
 518:	20 63       	ori	r18, 0x30	; 48
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
			break;
 51e:	01 c0       	rjmp	.+2      	; 0x522 <Configure_Interrupt+0x3cc>
		default:break;
 520:	00 00       	nop
		}
		break;
 522:	3e c0       	rjmp	.+124    	; 0x5a0 <Configure_Interrupt+0x44a>
	case 7: switch(INT_MODE){
 524:	8a 81       	ldd	r24, Y+2	; 0x02
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	b9 f0       	breq	.+46     	; 0x55e <Configure_Interrupt+0x408>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	91 05       	cpc	r25, r1
 534:	1c f4       	brge	.+6      	; 0x53c <Configure_Interrupt+0x3e6>
 536:	00 97       	sbiw	r24, 0x00	; 0
 538:	41 f0       	breq	.+16     	; 0x54a <Configure_Interrupt+0x3f4>
			break;
		case 2:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|0<<ISC70);
			break;
		case 3:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|1<<ISC70);
			break;
		default:break;
 53a:	31 c0       	rjmp	.+98     	; 0x59e <Configure_Interrupt+0x448>
		case 3:EICRB=(EICRB&(~(1<<ISC61|1<<ISC60)))|(1<<ISC61|1<<ISC60);
			break;
		default:break;
		}
		break;
	case 7: switch(INT_MODE){
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	91 05       	cpc	r25, r1
 540:	c9 f0       	breq	.+50     	; 0x574 <Configure_Interrupt+0x41e>
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	91 05       	cpc	r25, r1
 546:	09 f1       	breq	.+66     	; 0x58a <Configure_Interrupt+0x434>
			break;
		case 2:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|0<<ISC70);
			break;
		case 3:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|1<<ISC70);
			break;
		default:break;
 548:	2a c0       	rjmp	.+84     	; 0x59e <Configure_Interrupt+0x448>
			break;
		default:break;
		}
		break;
	case 7: switch(INT_MODE){
		case 0:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(0<<ISC71|0<<ISC70);
 54a:	8a e6       	ldi	r24, 0x6A	; 106
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	2a e6       	ldi	r18, 0x6A	; 106
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	f9 01       	movw	r30, r18
 554:	20 81       	ld	r18, Z
 556:	2f 73       	andi	r18, 0x3F	; 63
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
			break;
 55c:	20 c0       	rjmp	.+64     	; 0x59e <Configure_Interrupt+0x448>
		case 1:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(0<<ISC71|1<<ISC70);
 55e:	8a e6       	ldi	r24, 0x6A	; 106
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	2a e6       	ldi	r18, 0x6A	; 106
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	f9 01       	movw	r30, r18
 568:	20 81       	ld	r18, Z
 56a:	2f 73       	andi	r18, 0x3F	; 63
 56c:	20 64       	ori	r18, 0x40	; 64
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
			break;
 572:	15 c0       	rjmp	.+42     	; 0x59e <Configure_Interrupt+0x448>
		case 2:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|0<<ISC70);
 574:	8a e6       	ldi	r24, 0x6A	; 106
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	2a e6       	ldi	r18, 0x6A	; 106
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	20 81       	ld	r18, Z
 580:	2f 73       	andi	r18, 0x3F	; 63
 582:	20 68       	ori	r18, 0x80	; 128
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
			break;
 588:	0a c0       	rjmp	.+20     	; 0x59e <Configure_Interrupt+0x448>
		case 3:EICRB=(EICRB&(~(1<<ISC71|1<<ISC70)))|(1<<ISC71|1<<ISC70);
 58a:	8a e6       	ldi	r24, 0x6A	; 106
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	2a e6       	ldi	r18, 0x6A	; 106
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	20 6c       	ori	r18, 0xC0	; 192
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
			break;
 59c:	00 00       	nop
		default:break;
		}
		break;
 59e:	00 00       	nop
	default:break;
	}
}
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	cf 91       	pop	r28
 5a6:	df 91       	pop	r29
 5a8:	08 95       	ret

000005aa <Enable_Interrupt>:
/*! \brief This function enables the external interrupt.
 *         
 *  \param INT_NO	The interrupt which has to be enabled.
 */
void Enable_Interrupt(uint8_t INT_NO)
{
 5aa:	df 93       	push	r29
 5ac:	cf 93       	push	r28
 5ae:	0f 92       	push	r0
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_NO){
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	91 05       	cpc	r25, r1
 5c0:	d1 f1       	breq	.+116    	; 0x636 <Enable_Interrupt+0x8c>
 5c2:	84 30       	cpi	r24, 0x04	; 4
 5c4:	91 05       	cpc	r25, r1
 5c6:	4c f4       	brge	.+18     	; 0x5da <Enable_Interrupt+0x30>
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	91 05       	cpc	r25, r1
 5cc:	01 f1       	breq	.+64     	; 0x60e <Enable_Interrupt+0x64>
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	91 05       	cpc	r25, r1
 5d2:	3c f5       	brge	.+78     	; 0x622 <Enable_Interrupt+0x78>
 5d4:	00 97       	sbiw	r24, 0x00	; 0
 5d6:	89 f0       	breq	.+34     	; 0x5fa <Enable_Interrupt+0x50>
		break;
	case 6:EIMSK=(EIMSK&(~(1<<INT6)))|(1<<INT6);
		break;
	case 7:EIMSK=(EIMSK&(~(1<<INT7)))|(1<<INT7);
		break;
	default:break;
 5d8:	60 c0       	rjmp	.+192    	; 0x69a <Enable_Interrupt+0xf0>
 *         
 *  \param INT_NO	The interrupt which has to be enabled.
 */
void Enable_Interrupt(uint8_t INT_NO)
{
	switch(INT_NO){
 5da:	85 30       	cpi	r24, 0x05	; 5
 5dc:	91 05       	cpc	r25, r1
 5de:	09 f4       	brne	.+2      	; 0x5e2 <Enable_Interrupt+0x38>
 5e0:	3e c0       	rjmp	.+124    	; 0x65e <Enable_Interrupt+0xb4>
 5e2:	85 30       	cpi	r24, 0x05	; 5
 5e4:	91 05       	cpc	r25, r1
 5e6:	8c f1       	brlt	.+98     	; 0x64a <Enable_Interrupt+0xa0>
 5e8:	86 30       	cpi	r24, 0x06	; 6
 5ea:	91 05       	cpc	r25, r1
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <Enable_Interrupt+0x46>
 5ee:	41 c0       	rjmp	.+130    	; 0x672 <Enable_Interrupt+0xc8>
 5f0:	87 30       	cpi	r24, 0x07	; 7
 5f2:	91 05       	cpc	r25, r1
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <Enable_Interrupt+0x4e>
 5f6:	47 c0       	rjmp	.+142    	; 0x686 <Enable_Interrupt+0xdc>
		break;
	case 6:EIMSK=(EIMSK&(~(1<<INT6)))|(1<<INT6);
		break;
	case 7:EIMSK=(EIMSK&(~(1<<INT7)))|(1<<INT7);
		break;
	default:break;
 5f8:	50 c0       	rjmp	.+160    	; 0x69a <Enable_Interrupt+0xf0>
 *  \param INT_NO	The interrupt which has to be enabled.
 */
void Enable_Interrupt(uint8_t INT_NO)
{
	switch(INT_NO){
	case 0:EIMSK=(EIMSK&(~(1<<INT0)))|(1<<INT0);
 5fa:	8d e3       	ldi	r24, 0x3D	; 61
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	2d e3       	ldi	r18, 0x3D	; 61
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	f9 01       	movw	r30, r18
 604:	20 81       	ld	r18, Z
 606:	21 60       	ori	r18, 0x01	; 1
 608:	fc 01       	movw	r30, r24
 60a:	20 83       	st	Z, r18
		break;
 60c:	46 c0       	rjmp	.+140    	; 0x69a <Enable_Interrupt+0xf0>
	case 1:EIMSK=(EIMSK&(~(1<<INT1)))|(1<<INT1);
 60e:	8d e3       	ldi	r24, 0x3D	; 61
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	2d e3       	ldi	r18, 0x3D	; 61
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	f9 01       	movw	r30, r18
 618:	20 81       	ld	r18, Z
 61a:	22 60       	ori	r18, 0x02	; 2
 61c:	fc 01       	movw	r30, r24
 61e:	20 83       	st	Z, r18
		break;
 620:	3c c0       	rjmp	.+120    	; 0x69a <Enable_Interrupt+0xf0>
	case 2:EIMSK=(EIMSK&(~(1<<INT2)))|(1<<INT2);
 622:	8d e3       	ldi	r24, 0x3D	; 61
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	2d e3       	ldi	r18, 0x3D	; 61
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	f9 01       	movw	r30, r18
 62c:	20 81       	ld	r18, Z
 62e:	24 60       	ori	r18, 0x04	; 4
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18
		break;
 634:	32 c0       	rjmp	.+100    	; 0x69a <Enable_Interrupt+0xf0>
	case 3:EIMSK=(EIMSK&(~(1<<INT3)))|(1<<INT3);
 636:	8d e3       	ldi	r24, 0x3D	; 61
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	2d e3       	ldi	r18, 0x3D	; 61
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	f9 01       	movw	r30, r18
 640:	20 81       	ld	r18, Z
 642:	28 60       	ori	r18, 0x08	; 8
 644:	fc 01       	movw	r30, r24
 646:	20 83       	st	Z, r18
		break;
 648:	28 c0       	rjmp	.+80     	; 0x69a <Enable_Interrupt+0xf0>
	case 4:EIMSK=(EIMSK&(~(1<<INT4)))|(1<<INT4);
 64a:	8d e3       	ldi	r24, 0x3D	; 61
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	2d e3       	ldi	r18, 0x3D	; 61
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	f9 01       	movw	r30, r18
 654:	20 81       	ld	r18, Z
 656:	20 61       	ori	r18, 0x10	; 16
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
		break;
 65c:	1e c0       	rjmp	.+60     	; 0x69a <Enable_Interrupt+0xf0>
	case 5:EIMSK=(EIMSK&(~(1<<INT5)))|(1<<INT5);
 65e:	8d e3       	ldi	r24, 0x3D	; 61
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	2d e3       	ldi	r18, 0x3D	; 61
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	f9 01       	movw	r30, r18
 668:	20 81       	ld	r18, Z
 66a:	20 62       	ori	r18, 0x20	; 32
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18
		break;
 670:	14 c0       	rjmp	.+40     	; 0x69a <Enable_Interrupt+0xf0>
	case 6:EIMSK=(EIMSK&(~(1<<INT6)))|(1<<INT6);
 672:	8d e3       	ldi	r24, 0x3D	; 61
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	2d e3       	ldi	r18, 0x3D	; 61
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	f9 01       	movw	r30, r18
 67c:	20 81       	ld	r18, Z
 67e:	20 64       	ori	r18, 0x40	; 64
 680:	fc 01       	movw	r30, r24
 682:	20 83       	st	Z, r18
		break;
 684:	0a c0       	rjmp	.+20     	; 0x69a <Enable_Interrupt+0xf0>
	case 7:EIMSK=(EIMSK&(~(1<<INT7)))|(1<<INT7);
 686:	8d e3       	ldi	r24, 0x3D	; 61
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	2d e3       	ldi	r18, 0x3D	; 61
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	f9 01       	movw	r30, r18
 690:	20 81       	ld	r18, Z
 692:	20 68       	ori	r18, 0x80	; 128
 694:	fc 01       	movw	r30, r24
 696:	20 83       	st	Z, r18
		break;
 698:	00 00       	nop
	default:break;
	}
}
 69a:	0f 90       	pop	r0
 69c:	cf 91       	pop	r28
 69e:	df 91       	pop	r29
 6a0:	08 95       	ret

000006a2 <Enable_Pcinterrupt>:
/*! \brief This function enables the external pin change interrupt.
 *         
 *  \param PCINT_NO	The pin change interrupt which has to be enabled.
 */
void Enable_Pcinterrupt(uint8_t PCINT_NO)
{
 6a2:	df 93       	push	r29
 6a4:	cf 93       	push	r28
 6a6:	0f 92       	push	r0
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	89 83       	std	Y+1, r24	; 0x01
	if(PCINT_NO>=0 && PCINT_NO<=7)
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	88 30       	cpi	r24, 0x08	; 8
 6b2:	08 f0       	brcs	.+2      	; 0x6b6 <Enable_Pcinterrupt+0x14>
 6b4:	7c c0       	rjmp	.+248    	; 0x7ae <Enable_Pcinterrupt+0x10c>
	{
		PCICR=(PCICR&(~(1<<PCIE0)))|(1<<PCIE0);
 6b6:	88 e6       	ldi	r24, 0x68	; 104
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	28 e6       	ldi	r18, 0x68	; 104
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	f9 01       	movw	r30, r18
 6c0:	20 81       	ld	r18, Z
 6c2:	21 60       	ori	r18, 0x01	; 1
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 83       	st	Z, r18
		switch(PCINT_NO){
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	91 05       	cpc	r25, r1
 6d2:	d1 f1       	breq	.+116    	; 0x748 <Enable_Pcinterrupt+0xa6>
 6d4:	84 30       	cpi	r24, 0x04	; 4
 6d6:	91 05       	cpc	r25, r1
 6d8:	4c f4       	brge	.+18     	; 0x6ec <Enable_Pcinterrupt+0x4a>
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	91 05       	cpc	r25, r1
 6de:	01 f1       	breq	.+64     	; 0x720 <Enable_Pcinterrupt+0x7e>
 6e0:	82 30       	cpi	r24, 0x02	; 2
 6e2:	91 05       	cpc	r25, r1
 6e4:	3c f5       	brge	.+78     	; 0x734 <Enable_Pcinterrupt+0x92>
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	89 f0       	breq	.+34     	; 0x70c <Enable_Pcinterrupt+0x6a>
			break;
		case 6:PCMSK0=(PCMSK0&(~(1<<PCINT6)))|(1<<PCINT6);
			break;
		case 7:PCMSK0=(PCMSK0&(~(1<<PCINT7)))|(1<<PCINT7);
			break;
		default:break;
 6ea:	63 c1       	rjmp	.+710    	; 0x9b2 <Enable_Pcinterrupt+0x310>
void Enable_Pcinterrupt(uint8_t PCINT_NO)
{
	if(PCINT_NO>=0 && PCINT_NO<=7)
	{
		PCICR=(PCICR&(~(1<<PCIE0)))|(1<<PCIE0);
		switch(PCINT_NO){
 6ec:	85 30       	cpi	r24, 0x05	; 5
 6ee:	91 05       	cpc	r25, r1
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <Enable_Pcinterrupt+0x52>
 6f2:	3e c0       	rjmp	.+124    	; 0x770 <Enable_Pcinterrupt+0xce>
 6f4:	85 30       	cpi	r24, 0x05	; 5
 6f6:	91 05       	cpc	r25, r1
 6f8:	8c f1       	brlt	.+98     	; 0x75c <Enable_Pcinterrupt+0xba>
 6fa:	86 30       	cpi	r24, 0x06	; 6
 6fc:	91 05       	cpc	r25, r1
 6fe:	09 f4       	brne	.+2      	; 0x702 <Enable_Pcinterrupt+0x60>
 700:	41 c0       	rjmp	.+130    	; 0x784 <Enable_Pcinterrupt+0xe2>
 702:	87 30       	cpi	r24, 0x07	; 7
 704:	91 05       	cpc	r25, r1
 706:	09 f4       	brne	.+2      	; 0x70a <Enable_Pcinterrupt+0x68>
 708:	47 c0       	rjmp	.+142    	; 0x798 <Enable_Pcinterrupt+0xf6>
			break;
		case 6:PCMSK0=(PCMSK0&(~(1<<PCINT6)))|(1<<PCINT6);
			break;
		case 7:PCMSK0=(PCMSK0&(~(1<<PCINT7)))|(1<<PCINT7);
			break;
		default:break;
 70a:	53 c1       	rjmp	.+678    	; 0x9b2 <Enable_Pcinterrupt+0x310>
{
	if(PCINT_NO>=0 && PCINT_NO<=7)
	{
		PCICR=(PCICR&(~(1<<PCIE0)))|(1<<PCIE0);
		switch(PCINT_NO){
		case 0:PCMSK0=(PCMSK0&(~(1<<PCINT0)))|(1<<PCINT0);
 70c:	8b e6       	ldi	r24, 0x6B	; 107
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	2b e6       	ldi	r18, 0x6B	; 107
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	f9 01       	movw	r30, r18
 716:	20 81       	ld	r18, Z
 718:	21 60       	ori	r18, 0x01	; 1
 71a:	fc 01       	movw	r30, r24
 71c:	20 83       	st	Z, r18
			break;
 71e:	49 c1       	rjmp	.+658    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 1:PCMSK0=(PCMSK0&(~(1<<PCINT1)))|(1<<PCINT1);
 720:	8b e6       	ldi	r24, 0x6B	; 107
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	2b e6       	ldi	r18, 0x6B	; 107
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	f9 01       	movw	r30, r18
 72a:	20 81       	ld	r18, Z
 72c:	22 60       	ori	r18, 0x02	; 2
 72e:	fc 01       	movw	r30, r24
 730:	20 83       	st	Z, r18
			break;
 732:	3f c1       	rjmp	.+638    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 2:PCMSK0=(PCMSK0&(~(1<<PCINT2)))|(1<<PCINT2);
 734:	8b e6       	ldi	r24, 0x6B	; 107
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	2b e6       	ldi	r18, 0x6B	; 107
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	f9 01       	movw	r30, r18
 73e:	20 81       	ld	r18, Z
 740:	24 60       	ori	r18, 0x04	; 4
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
			break;
 746:	35 c1       	rjmp	.+618    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 3:PCMSK0=(PCMSK0&(~(1<<PCINT3)))|(1<<PCINT3);
 748:	8b e6       	ldi	r24, 0x6B	; 107
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	2b e6       	ldi	r18, 0x6B	; 107
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	20 81       	ld	r18, Z
 754:	28 60       	ori	r18, 0x08	; 8
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
			break;
 75a:	2b c1       	rjmp	.+598    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 4:PCMSK0=(PCMSK0&(~(1<<PCINT4)))|(1<<PCINT4);
 75c:	8b e6       	ldi	r24, 0x6B	; 107
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	2b e6       	ldi	r18, 0x6B	; 107
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	f9 01       	movw	r30, r18
 766:	20 81       	ld	r18, Z
 768:	20 61       	ori	r18, 0x10	; 16
 76a:	fc 01       	movw	r30, r24
 76c:	20 83       	st	Z, r18
			break;
 76e:	21 c1       	rjmp	.+578    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 5:PCMSK0=(PCMSK0&(~(1<<PCINT5)))|(1<<PCINT5);
 770:	8b e6       	ldi	r24, 0x6B	; 107
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	2b e6       	ldi	r18, 0x6B	; 107
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	f9 01       	movw	r30, r18
 77a:	20 81       	ld	r18, Z
 77c:	20 62       	ori	r18, 0x20	; 32
 77e:	fc 01       	movw	r30, r24
 780:	20 83       	st	Z, r18
			break;
 782:	17 c1       	rjmp	.+558    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 6:PCMSK0=(PCMSK0&(~(1<<PCINT6)))|(1<<PCINT6);
 784:	8b e6       	ldi	r24, 0x6B	; 107
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	2b e6       	ldi	r18, 0x6B	; 107
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	f9 01       	movw	r30, r18
 78e:	20 81       	ld	r18, Z
 790:	20 64       	ori	r18, 0x40	; 64
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
			break;
 796:	0d c1       	rjmp	.+538    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 7:PCMSK0=(PCMSK0&(~(1<<PCINT7)))|(1<<PCINT7);
 798:	8b e6       	ldi	r24, 0x6B	; 107
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	2b e6       	ldi	r18, 0x6B	; 107
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	f9 01       	movw	r30, r18
 7a2:	20 81       	ld	r18, Z
 7a4:	20 68       	ori	r18, 0x80	; 128
 7a6:	fc 01       	movw	r30, r24
 7a8:	20 83       	st	Z, r18
			break;
 7aa:	00 00       	nop
 7ac:	02 c1       	rjmp	.+516    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		default:break;
		}
	}
	else if(PCINT_NO>=8 && PCINT_NO<=15)
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	88 30       	cpi	r24, 0x08	; 8
 7b2:	08 f4       	brcc	.+2      	; 0x7b6 <Enable_Pcinterrupt+0x114>
 7b4:	82 c0       	rjmp	.+260    	; 0x8ba <Enable_Pcinterrupt+0x218>
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	80 31       	cpi	r24, 0x10	; 16
 7ba:	08 f0       	brcs	.+2      	; 0x7be <Enable_Pcinterrupt+0x11c>
 7bc:	7e c0       	rjmp	.+252    	; 0x8ba <Enable_Pcinterrupt+0x218>
	{
		PCICR=(PCICR&(~(1<<PCIE1)))|(1<<PCIE1);	
 7be:	88 e6       	ldi	r24, 0x68	; 104
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	28 e6       	ldi	r18, 0x68	; 104
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	f9 01       	movw	r30, r18
 7c8:	20 81       	ld	r18, Z
 7ca:	22 60       	ori	r18, 0x02	; 2
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
		switch(PCINT_NO){
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	88 2f       	mov	r24, r24
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	8b 30       	cpi	r24, 0x0B	; 11
 7d8:	91 05       	cpc	r25, r1
 7da:	d9 f1       	breq	.+118    	; 0x852 <Enable_Pcinterrupt+0x1b0>
 7dc:	8c 30       	cpi	r24, 0x0C	; 12
 7de:	91 05       	cpc	r25, r1
 7e0:	54 f4       	brge	.+20     	; 0x7f6 <Enable_Pcinterrupt+0x154>
 7e2:	89 30       	cpi	r24, 0x09	; 9
 7e4:	91 05       	cpc	r25, r1
 7e6:	09 f1       	breq	.+66     	; 0x82a <Enable_Pcinterrupt+0x188>
 7e8:	8a 30       	cpi	r24, 0x0A	; 10
 7ea:	91 05       	cpc	r25, r1
 7ec:	44 f5       	brge	.+80     	; 0x83e <Enable_Pcinterrupt+0x19c>
 7ee:	88 30       	cpi	r24, 0x08	; 8
 7f0:	91 05       	cpc	r25, r1
 7f2:	89 f0       	breq	.+34     	; 0x816 <Enable_Pcinterrupt+0x174>
 7f4:	60 c0       	rjmp	.+192    	; 0x8b6 <Enable_Pcinterrupt+0x214>
 7f6:	8d 30       	cpi	r24, 0x0D	; 13
 7f8:	91 05       	cpc	r25, r1
 7fa:	09 f4       	brne	.+2      	; 0x7fe <Enable_Pcinterrupt+0x15c>
 7fc:	3e c0       	rjmp	.+124    	; 0x87a <Enable_Pcinterrupt+0x1d8>
 7fe:	8d 30       	cpi	r24, 0x0D	; 13
 800:	91 05       	cpc	r25, r1
 802:	8c f1       	brlt	.+98     	; 0x866 <Enable_Pcinterrupt+0x1c4>
 804:	8e 30       	cpi	r24, 0x0E	; 14
 806:	91 05       	cpc	r25, r1
 808:	09 f4       	brne	.+2      	; 0x80c <Enable_Pcinterrupt+0x16a>
 80a:	41 c0       	rjmp	.+130    	; 0x88e <Enable_Pcinterrupt+0x1ec>
 80c:	8f 30       	cpi	r24, 0x0F	; 15
 80e:	91 05       	cpc	r25, r1
 810:	09 f4       	brne	.+2      	; 0x814 <Enable_Pcinterrupt+0x172>
 812:	47 c0       	rjmp	.+142    	; 0x8a2 <Enable_Pcinterrupt+0x200>
 814:	50 c0       	rjmp	.+160    	; 0x8b6 <Enable_Pcinterrupt+0x214>
		case 8:PCMSK1=(PCMSK1&(~(1<<PCINT8)))|(1<<PCINT8);
 816:	8c e6       	ldi	r24, 0x6C	; 108
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	2c e6       	ldi	r18, 0x6C	; 108
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	f9 01       	movw	r30, r18
 820:	20 81       	ld	r18, Z
 822:	21 60       	ori	r18, 0x01	; 1
 824:	fc 01       	movw	r30, r24
 826:	20 83       	st	Z, r18
			break;
 828:	47 c0       	rjmp	.+142    	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 9:PCMSK1=(PCMSK1&(~(1<<PCINT9)))|(1<<PCINT9);
 82a:	8c e6       	ldi	r24, 0x6C	; 108
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	2c e6       	ldi	r18, 0x6C	; 108
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	f9 01       	movw	r30, r18
 834:	20 81       	ld	r18, Z
 836:	22 60       	ori	r18, 0x02	; 2
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
			break;
 83c:	3d c0       	rjmp	.+122    	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 10:PCMSK1=(PCMSK1&(~(1<<PCINT10)))|(1<<PCINT10);
 83e:	8c e6       	ldi	r24, 0x6C	; 108
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	2c e6       	ldi	r18, 0x6C	; 108
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	f9 01       	movw	r30, r18
 848:	20 81       	ld	r18, Z
 84a:	24 60       	ori	r18, 0x04	; 4
 84c:	fc 01       	movw	r30, r24
 84e:	20 83       	st	Z, r18
			break;
 850:	33 c0       	rjmp	.+102    	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 11:PCMSK1=(PCMSK1&(~(1<<PCINT11)))|(1<<PCINT11);
 852:	8c e6       	ldi	r24, 0x6C	; 108
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	2c e6       	ldi	r18, 0x6C	; 108
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	f9 01       	movw	r30, r18
 85c:	20 81       	ld	r18, Z
 85e:	28 60       	ori	r18, 0x08	; 8
 860:	fc 01       	movw	r30, r24
 862:	20 83       	st	Z, r18
			break;
 864:	29 c0       	rjmp	.+82     	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 12:PCMSK1=(PCMSK1&(~(1<<PCINT12)))|(1<<PCINT12);
 866:	8c e6       	ldi	r24, 0x6C	; 108
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	2c e6       	ldi	r18, 0x6C	; 108
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	f9 01       	movw	r30, r18
 870:	20 81       	ld	r18, Z
 872:	20 61       	ori	r18, 0x10	; 16
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
			break;
 878:	1f c0       	rjmp	.+62     	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 13:PCMSK1=(PCMSK1&(~(1<<PCINT13)))|(1<<PCINT13);
 87a:	8c e6       	ldi	r24, 0x6C	; 108
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	2c e6       	ldi	r18, 0x6C	; 108
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	f9 01       	movw	r30, r18
 884:	20 81       	ld	r18, Z
 886:	20 62       	ori	r18, 0x20	; 32
 888:	fc 01       	movw	r30, r24
 88a:	20 83       	st	Z, r18
			break;
 88c:	15 c0       	rjmp	.+42     	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 14:PCMSK1=(PCMSK1&(~(1<<PCINT14)))|(1<<PCINT14);
 88e:	8c e6       	ldi	r24, 0x6C	; 108
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	2c e6       	ldi	r18, 0x6C	; 108
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	f9 01       	movw	r30, r18
 898:	20 81       	ld	r18, Z
 89a:	20 64       	ori	r18, 0x40	; 64
 89c:	fc 01       	movw	r30, r24
 89e:	20 83       	st	Z, r18
			break;
 8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <Enable_Pcinterrupt+0x216>
		case 15:PCMSK1=(PCMSK1&(~(1<<PCINT15)))|(1<<PCINT15);
 8a2:	8c e6       	ldi	r24, 0x6C	; 108
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	2c e6       	ldi	r18, 0x6C	; 108
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	f9 01       	movw	r30, r18
 8ac:	20 81       	ld	r18, Z
 8ae:	20 68       	ori	r18, 0x80	; 128
 8b0:	fc 01       	movw	r30, r24
 8b2:	20 83       	st	Z, r18
			break;
 8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <Enable_Pcinterrupt+0x216>
		default:break;
 8b6:	00 00       	nop
		}
	}
 8b8:	7c c0       	rjmp	.+248    	; 0x9b2 <Enable_Pcinterrupt+0x310>
	else
	{
		PCICR=(PCICR&(~(1<<PCIE2)))|(1<<PCIE2);
 8ba:	88 e6       	ldi	r24, 0x68	; 104
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	28 e6       	ldi	r18, 0x68	; 104
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	f9 01       	movw	r30, r18
 8c4:	20 81       	ld	r18, Z
 8c6:	24 60       	ori	r18, 0x04	; 4
 8c8:	fc 01       	movw	r30, r24
 8ca:	20 83       	st	Z, r18
		switch(PCINT_NO){
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	88 2f       	mov	r24, r24
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	83 31       	cpi	r24, 0x13	; 19
 8d4:	91 05       	cpc	r25, r1
 8d6:	d9 f1       	breq	.+118    	; 0x94e <Enable_Pcinterrupt+0x2ac>
 8d8:	84 31       	cpi	r24, 0x14	; 20
 8da:	91 05       	cpc	r25, r1
 8dc:	54 f4       	brge	.+20     	; 0x8f2 <Enable_Pcinterrupt+0x250>
 8de:	81 31       	cpi	r24, 0x11	; 17
 8e0:	91 05       	cpc	r25, r1
 8e2:	09 f1       	breq	.+66     	; 0x926 <Enable_Pcinterrupt+0x284>
 8e4:	82 31       	cpi	r24, 0x12	; 18
 8e6:	91 05       	cpc	r25, r1
 8e8:	44 f5       	brge	.+80     	; 0x93a <Enable_Pcinterrupt+0x298>
 8ea:	80 31       	cpi	r24, 0x10	; 16
 8ec:	91 05       	cpc	r25, r1
 8ee:	89 f0       	breq	.+34     	; 0x912 <Enable_Pcinterrupt+0x270>
			break;
		case 22:PCMSK2=(PCMSK2&(~(1<<PCINT22)))|(1<<PCINT22);
			break;
		case 23:PCMSK2=(PCMSK2&(~(1<<PCINT23)))|(1<<PCINT23);
			break;
		default:break;
 8f0:	60 c0       	rjmp	.+192    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		}
	}
	else
	{
		PCICR=(PCICR&(~(1<<PCIE2)))|(1<<PCIE2);
		switch(PCINT_NO){
 8f2:	85 31       	cpi	r24, 0x15	; 21
 8f4:	91 05       	cpc	r25, r1
 8f6:	09 f4       	brne	.+2      	; 0x8fa <Enable_Pcinterrupt+0x258>
 8f8:	3e c0       	rjmp	.+124    	; 0x976 <Enable_Pcinterrupt+0x2d4>
 8fa:	85 31       	cpi	r24, 0x15	; 21
 8fc:	91 05       	cpc	r25, r1
 8fe:	8c f1       	brlt	.+98     	; 0x962 <Enable_Pcinterrupt+0x2c0>
 900:	86 31       	cpi	r24, 0x16	; 22
 902:	91 05       	cpc	r25, r1
 904:	09 f4       	brne	.+2      	; 0x908 <Enable_Pcinterrupt+0x266>
 906:	41 c0       	rjmp	.+130    	; 0x98a <Enable_Pcinterrupt+0x2e8>
 908:	87 31       	cpi	r24, 0x17	; 23
 90a:	91 05       	cpc	r25, r1
 90c:	09 f4       	brne	.+2      	; 0x910 <Enable_Pcinterrupt+0x26e>
 90e:	47 c0       	rjmp	.+142    	; 0x99e <Enable_Pcinterrupt+0x2fc>
			break;
		case 22:PCMSK2=(PCMSK2&(~(1<<PCINT22)))|(1<<PCINT22);
			break;
		case 23:PCMSK2=(PCMSK2&(~(1<<PCINT23)))|(1<<PCINT23);
			break;
		default:break;
 910:	50 c0       	rjmp	.+160    	; 0x9b2 <Enable_Pcinterrupt+0x310>
	}
	else
	{
		PCICR=(PCICR&(~(1<<PCIE2)))|(1<<PCIE2);
		switch(PCINT_NO){
		case 16:PCMSK2=(PCMSK2&(~(1<<PCINT16)))|(1<<PCINT16);
 912:	8d e6       	ldi	r24, 0x6D	; 109
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	2d e6       	ldi	r18, 0x6D	; 109
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	f9 01       	movw	r30, r18
 91c:	20 81       	ld	r18, Z
 91e:	21 60       	ori	r18, 0x01	; 1
 920:	fc 01       	movw	r30, r24
 922:	20 83       	st	Z, r18
			break;
 924:	46 c0       	rjmp	.+140    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 17:PCMSK2=(PCMSK2&(~(1<<PCINT17)))|(1<<PCINT17);
 926:	8d e6       	ldi	r24, 0x6D	; 109
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	2d e6       	ldi	r18, 0x6D	; 109
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	f9 01       	movw	r30, r18
 930:	20 81       	ld	r18, Z
 932:	22 60       	ori	r18, 0x02	; 2
 934:	fc 01       	movw	r30, r24
 936:	20 83       	st	Z, r18
			break;
 938:	3c c0       	rjmp	.+120    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 18:PCMSK2=(PCMSK2&(~(1<<PCINT18)))|(1<<PCINT18);
 93a:	8d e6       	ldi	r24, 0x6D	; 109
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	2d e6       	ldi	r18, 0x6D	; 109
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	f9 01       	movw	r30, r18
 944:	20 81       	ld	r18, Z
 946:	24 60       	ori	r18, 0x04	; 4
 948:	fc 01       	movw	r30, r24
 94a:	20 83       	st	Z, r18
			break;
 94c:	32 c0       	rjmp	.+100    	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 19:PCMSK2=(PCMSK2&(~(1<<PCINT19)))|(1<<PCINT19);
 94e:	8d e6       	ldi	r24, 0x6D	; 109
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	2d e6       	ldi	r18, 0x6D	; 109
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	f9 01       	movw	r30, r18
 958:	20 81       	ld	r18, Z
 95a:	28 60       	ori	r18, 0x08	; 8
 95c:	fc 01       	movw	r30, r24
 95e:	20 83       	st	Z, r18
			break;
 960:	28 c0       	rjmp	.+80     	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 20:PCMSK2=(PCMSK2&(~(1<<PCINT20)))|(1<<PCINT20);
 962:	8d e6       	ldi	r24, 0x6D	; 109
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	2d e6       	ldi	r18, 0x6D	; 109
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	f9 01       	movw	r30, r18
 96c:	20 81       	ld	r18, Z
 96e:	20 61       	ori	r18, 0x10	; 16
 970:	fc 01       	movw	r30, r24
 972:	20 83       	st	Z, r18
			break;
 974:	1e c0       	rjmp	.+60     	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 21:PCMSK2=(PCMSK2&(~(1<<PCINT21)))|(1<<PCINT21);
 976:	8d e6       	ldi	r24, 0x6D	; 109
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	2d e6       	ldi	r18, 0x6D	; 109
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	f9 01       	movw	r30, r18
 980:	20 81       	ld	r18, Z
 982:	20 62       	ori	r18, 0x20	; 32
 984:	fc 01       	movw	r30, r24
 986:	20 83       	st	Z, r18
			break;
 988:	14 c0       	rjmp	.+40     	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 22:PCMSK2=(PCMSK2&(~(1<<PCINT22)))|(1<<PCINT22);
 98a:	8d e6       	ldi	r24, 0x6D	; 109
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	2d e6       	ldi	r18, 0x6D	; 109
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	f9 01       	movw	r30, r18
 994:	20 81       	ld	r18, Z
 996:	20 64       	ori	r18, 0x40	; 64
 998:	fc 01       	movw	r30, r24
 99a:	20 83       	st	Z, r18
			break;
 99c:	0a c0       	rjmp	.+20     	; 0x9b2 <Enable_Pcinterrupt+0x310>
		case 23:PCMSK2=(PCMSK2&(~(1<<PCINT23)))|(1<<PCINT23);
 99e:	8d e6       	ldi	r24, 0x6D	; 109
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	2d e6       	ldi	r18, 0x6D	; 109
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	f9 01       	movw	r30, r18
 9a8:	20 81       	ld	r18, Z
 9aa:	20 68       	ori	r18, 0x80	; 128
 9ac:	fc 01       	movw	r30, r24
 9ae:	20 83       	st	Z, r18
			break;
 9b0:	00 00       	nop
		default:break;
		}
	}
}
 9b2:	0f 90       	pop	r0
 9b4:	cf 91       	pop	r28
 9b6:	df 91       	pop	r29
 9b8:	08 95       	ret

000009ba <Disable_Interrupt>:
/*! \brief This function disables the external interrupt.
 *         
 *  \param INT_NO	The interrupt which has to be disabled.
 */
void Disable_Interrupt(uint8_t INT_NO)
{
 9ba:	df 93       	push	r29
 9bc:	cf 93       	push	r28
 9be:	0f 92       	push	r0
 9c0:	cd b7       	in	r28, 0x3d	; 61
 9c2:	de b7       	in	r29, 0x3e	; 62
 9c4:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_NO){
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
 9c8:	88 2f       	mov	r24, r24
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	83 30       	cpi	r24, 0x03	; 3
 9ce:	91 05       	cpc	r25, r1
 9d0:	d1 f1       	breq	.+116    	; 0xa46 <Disable_Interrupt+0x8c>
 9d2:	84 30       	cpi	r24, 0x04	; 4
 9d4:	91 05       	cpc	r25, r1
 9d6:	4c f4       	brge	.+18     	; 0x9ea <Disable_Interrupt+0x30>
 9d8:	81 30       	cpi	r24, 0x01	; 1
 9da:	91 05       	cpc	r25, r1
 9dc:	01 f1       	breq	.+64     	; 0xa1e <Disable_Interrupt+0x64>
 9de:	82 30       	cpi	r24, 0x02	; 2
 9e0:	91 05       	cpc	r25, r1
 9e2:	3c f5       	brge	.+78     	; 0xa32 <Disable_Interrupt+0x78>
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	89 f0       	breq	.+34     	; 0xa0a <Disable_Interrupt+0x50>
		break;
	case 6:EIMSK=(EIMSK&(~(1<<INT6)));
		break;
	case 7:EIMSK=(EIMSK&(~(1<<INT7)));
		break;
	default:break;
 9e8:	60 c0       	rjmp	.+192    	; 0xaaa <Disable_Interrupt+0xf0>
 *         
 *  \param INT_NO	The interrupt which has to be disabled.
 */
void Disable_Interrupt(uint8_t INT_NO)
{
	switch(INT_NO){
 9ea:	85 30       	cpi	r24, 0x05	; 5
 9ec:	91 05       	cpc	r25, r1
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <Disable_Interrupt+0x38>
 9f0:	3e c0       	rjmp	.+124    	; 0xa6e <Disable_Interrupt+0xb4>
 9f2:	85 30       	cpi	r24, 0x05	; 5
 9f4:	91 05       	cpc	r25, r1
 9f6:	8c f1       	brlt	.+98     	; 0xa5a <Disable_Interrupt+0xa0>
 9f8:	86 30       	cpi	r24, 0x06	; 6
 9fa:	91 05       	cpc	r25, r1
 9fc:	09 f4       	brne	.+2      	; 0xa00 <Disable_Interrupt+0x46>
 9fe:	41 c0       	rjmp	.+130    	; 0xa82 <Disable_Interrupt+0xc8>
 a00:	87 30       	cpi	r24, 0x07	; 7
 a02:	91 05       	cpc	r25, r1
 a04:	09 f4       	brne	.+2      	; 0xa08 <Disable_Interrupt+0x4e>
 a06:	47 c0       	rjmp	.+142    	; 0xa96 <Disable_Interrupt+0xdc>
		break;
	case 6:EIMSK=(EIMSK&(~(1<<INT6)));
		break;
	case 7:EIMSK=(EIMSK&(~(1<<INT7)));
		break;
	default:break;
 a08:	50 c0       	rjmp	.+160    	; 0xaaa <Disable_Interrupt+0xf0>
 *  \param INT_NO	The interrupt which has to be disabled.
 */
void Disable_Interrupt(uint8_t INT_NO)
{
	switch(INT_NO){
	case 0:EIMSK=(EIMSK&(~(1<<INT0)));
 a0a:	8d e3       	ldi	r24, 0x3D	; 61
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	2d e3       	ldi	r18, 0x3D	; 61
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	f9 01       	movw	r30, r18
 a14:	20 81       	ld	r18, Z
 a16:	2e 7f       	andi	r18, 0xFE	; 254
 a18:	fc 01       	movw	r30, r24
 a1a:	20 83       	st	Z, r18
		break;
 a1c:	46 c0       	rjmp	.+140    	; 0xaaa <Disable_Interrupt+0xf0>
	case 1:EIMSK=(EIMSK&(~(1<<INT1)));
 a1e:	8d e3       	ldi	r24, 0x3D	; 61
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	2d e3       	ldi	r18, 0x3D	; 61
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	f9 01       	movw	r30, r18
 a28:	20 81       	ld	r18, Z
 a2a:	2d 7f       	andi	r18, 0xFD	; 253
 a2c:	fc 01       	movw	r30, r24
 a2e:	20 83       	st	Z, r18
		break;
 a30:	3c c0       	rjmp	.+120    	; 0xaaa <Disable_Interrupt+0xf0>
	case 2:EIMSK=(EIMSK&(~(1<<INT2)));
 a32:	8d e3       	ldi	r24, 0x3D	; 61
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	2d e3       	ldi	r18, 0x3D	; 61
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	f9 01       	movw	r30, r18
 a3c:	20 81       	ld	r18, Z
 a3e:	2b 7f       	andi	r18, 0xFB	; 251
 a40:	fc 01       	movw	r30, r24
 a42:	20 83       	st	Z, r18
		break;
 a44:	32 c0       	rjmp	.+100    	; 0xaaa <Disable_Interrupt+0xf0>
	case 3:EIMSK=(EIMSK&(~(1<<INT3)));
 a46:	8d e3       	ldi	r24, 0x3D	; 61
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	2d e3       	ldi	r18, 0x3D	; 61
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	f9 01       	movw	r30, r18
 a50:	20 81       	ld	r18, Z
 a52:	27 7f       	andi	r18, 0xF7	; 247
 a54:	fc 01       	movw	r30, r24
 a56:	20 83       	st	Z, r18
		break;
 a58:	28 c0       	rjmp	.+80     	; 0xaaa <Disable_Interrupt+0xf0>
	case 4:EIMSK=(EIMSK&(~(1<<INT4)));
 a5a:	8d e3       	ldi	r24, 0x3D	; 61
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	2d e3       	ldi	r18, 0x3D	; 61
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	f9 01       	movw	r30, r18
 a64:	20 81       	ld	r18, Z
 a66:	2f 7e       	andi	r18, 0xEF	; 239
 a68:	fc 01       	movw	r30, r24
 a6a:	20 83       	st	Z, r18
		break;
 a6c:	1e c0       	rjmp	.+60     	; 0xaaa <Disable_Interrupt+0xf0>
	case 5:EIMSK=(EIMSK&(~(1<<INT5)));
 a6e:	8d e3       	ldi	r24, 0x3D	; 61
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	2d e3       	ldi	r18, 0x3D	; 61
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	f9 01       	movw	r30, r18
 a78:	20 81       	ld	r18, Z
 a7a:	2f 7d       	andi	r18, 0xDF	; 223
 a7c:	fc 01       	movw	r30, r24
 a7e:	20 83       	st	Z, r18
		break;
 a80:	14 c0       	rjmp	.+40     	; 0xaaa <Disable_Interrupt+0xf0>
	case 6:EIMSK=(EIMSK&(~(1<<INT6)));
 a82:	8d e3       	ldi	r24, 0x3D	; 61
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	2d e3       	ldi	r18, 0x3D	; 61
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	f9 01       	movw	r30, r18
 a8c:	20 81       	ld	r18, Z
 a8e:	2f 7b       	andi	r18, 0xBF	; 191
 a90:	fc 01       	movw	r30, r24
 a92:	20 83       	st	Z, r18
		break;
 a94:	0a c0       	rjmp	.+20     	; 0xaaa <Disable_Interrupt+0xf0>
	case 7:EIMSK=(EIMSK&(~(1<<INT7)));
 a96:	8d e3       	ldi	r24, 0x3D	; 61
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	2d e3       	ldi	r18, 0x3D	; 61
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	f9 01       	movw	r30, r18
 aa0:	20 81       	ld	r18, Z
 aa2:	2f 77       	andi	r18, 0x7F	; 127
 aa4:	fc 01       	movw	r30, r24
 aa6:	20 83       	st	Z, r18
		break;
 aa8:	00 00       	nop
	default:break;
	}
}
 aaa:	0f 90       	pop	r0
 aac:	cf 91       	pop	r28
 aae:	df 91       	pop	r29
 ab0:	08 95       	ret

00000ab2 <Disable_Pcinterrupt>:
/*! \brief This function disables the external pin change interrupt.
 *         
 *  \param PCINT_NO	The pin change interrupt which has to be disabled.
 */
void Disable_Pcinterrupt(uint8_t PCINT_NO)
{
 ab2:	df 93       	push	r29
 ab4:	cf 93       	push	r28
 ab6:	0f 92       	push	r0
 ab8:	cd b7       	in	r28, 0x3d	; 61
 aba:	de b7       	in	r29, 0x3e	; 62
 abc:	89 83       	std	Y+1, r24	; 0x01
	switch(PCINT_NO){
 abe:	89 81       	ldd	r24, Y+1	; 0x01
 ac0:	88 2f       	mov	r24, r24
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	aa 27       	eor	r26, r26
 ac6:	97 fd       	sbrc	r25, 7
 ac8:	a0 95       	com	r26
 aca:	ba 2f       	mov	r27, r26
 acc:	40 e0       	ldi	r20, 0x00	; 0
 ace:	50 e0       	ldi	r21, 0x00	; 0
 ad0:	27 e1       	ldi	r18, 0x17	; 23
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	84 1b       	sub	r24, r20
 ad6:	95 0b       	sbc	r25, r21
 ad8:	28 17       	cp	r18, r24
 ada:	39 07       	cpc	r19, r25
 adc:	08 f4       	brcc	.+2      	; 0xae0 <Disable_Pcinterrupt+0x2e>
 ade:	f9 c0       	rjmp	.+498    	; 0xcd2 <Disable_Pcinterrupt+0x220>
 ae0:	8e 58       	subi	r24, 0x8E	; 142
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	fc 01       	movw	r30, r24
 ae6:	ee 0f       	add	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	05 90       	lpm	r0, Z+
 aec:	f4 91       	lpm	r31, Z+
 aee:	e0 2d       	mov	r30, r0
 af0:	19 94       	eijmp
	case 0:PCMSK0=(PCMSK0&(~(1<<PCINT0)));
 af2:	8b e6       	ldi	r24, 0x6B	; 107
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	2b e6       	ldi	r18, 0x6B	; 107
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	f9 01       	movw	r30, r18
 afc:	20 81       	ld	r18, Z
 afe:	2e 7f       	andi	r18, 0xFE	; 254
 b00:	fc 01       	movw	r30, r24
 b02:	20 83       	st	Z, r18
		break;
 b04:	e7 c0       	rjmp	.+462    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 1:PCMSK0=(PCMSK0&(~(1<<PCINT1)));
 b06:	8b e6       	ldi	r24, 0x6B	; 107
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	2b e6       	ldi	r18, 0x6B	; 107
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	f9 01       	movw	r30, r18
 b10:	20 81       	ld	r18, Z
 b12:	2d 7f       	andi	r18, 0xFD	; 253
 b14:	fc 01       	movw	r30, r24
 b16:	20 83       	st	Z, r18
		break;
 b18:	dd c0       	rjmp	.+442    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 2:PCMSK0=(PCMSK0&(~(1<<PCINT2)));
 b1a:	8b e6       	ldi	r24, 0x6B	; 107
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	2b e6       	ldi	r18, 0x6B	; 107
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	f9 01       	movw	r30, r18
 b24:	20 81       	ld	r18, Z
 b26:	2b 7f       	andi	r18, 0xFB	; 251
 b28:	fc 01       	movw	r30, r24
 b2a:	20 83       	st	Z, r18
		break;
 b2c:	d3 c0       	rjmp	.+422    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 3:PCMSK0=(PCMSK0&(~(1<<PCINT3)));
 b2e:	8b e6       	ldi	r24, 0x6B	; 107
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	2b e6       	ldi	r18, 0x6B	; 107
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	f9 01       	movw	r30, r18
 b38:	20 81       	ld	r18, Z
 b3a:	27 7f       	andi	r18, 0xF7	; 247
 b3c:	fc 01       	movw	r30, r24
 b3e:	20 83       	st	Z, r18
		break;
 b40:	c9 c0       	rjmp	.+402    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 4:PCMSK0=(PCMSK0&(~(1<<PCINT4)));
 b42:	8b e6       	ldi	r24, 0x6B	; 107
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	2b e6       	ldi	r18, 0x6B	; 107
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	f9 01       	movw	r30, r18
 b4c:	20 81       	ld	r18, Z
 b4e:	2f 7e       	andi	r18, 0xEF	; 239
 b50:	fc 01       	movw	r30, r24
 b52:	20 83       	st	Z, r18
		break;
 b54:	bf c0       	rjmp	.+382    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 5:PCMSK0=(PCMSK0&(~(1<<PCINT5)));
 b56:	8b e6       	ldi	r24, 0x6B	; 107
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	2b e6       	ldi	r18, 0x6B	; 107
 b5c:	30 e0       	ldi	r19, 0x00	; 0
 b5e:	f9 01       	movw	r30, r18
 b60:	20 81       	ld	r18, Z
 b62:	2f 7d       	andi	r18, 0xDF	; 223
 b64:	fc 01       	movw	r30, r24
 b66:	20 83       	st	Z, r18
		break;
 b68:	b5 c0       	rjmp	.+362    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 6:PCMSK0=(PCMSK0&(~(1<<PCINT6)));
 b6a:	8b e6       	ldi	r24, 0x6B	; 107
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	2b e6       	ldi	r18, 0x6B	; 107
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	f9 01       	movw	r30, r18
 b74:	20 81       	ld	r18, Z
 b76:	2f 7b       	andi	r18, 0xBF	; 191
 b78:	fc 01       	movw	r30, r24
 b7a:	20 83       	st	Z, r18
		break;
 b7c:	ab c0       	rjmp	.+342    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 7:PCMSK0=(PCMSK0&(~(1<<PCINT7)));
 b7e:	8b e6       	ldi	r24, 0x6B	; 107
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	2b e6       	ldi	r18, 0x6B	; 107
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	f9 01       	movw	r30, r18
 b88:	20 81       	ld	r18, Z
 b8a:	2f 77       	andi	r18, 0x7F	; 127
 b8c:	fc 01       	movw	r30, r24
 b8e:	20 83       	st	Z, r18
		break;
 b90:	a1 c0       	rjmp	.+322    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 8:PCMSK1=(PCMSK1&(~(1<<PCINT8)));
 b92:	8c e6       	ldi	r24, 0x6C	; 108
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	2c e6       	ldi	r18, 0x6C	; 108
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	f9 01       	movw	r30, r18
 b9c:	20 81       	ld	r18, Z
 b9e:	2e 7f       	andi	r18, 0xFE	; 254
 ba0:	fc 01       	movw	r30, r24
 ba2:	20 83       	st	Z, r18
		break;
 ba4:	97 c0       	rjmp	.+302    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 9:PCMSK1=(PCMSK1&(~(1<<PCINT9)));
 ba6:	8c e6       	ldi	r24, 0x6C	; 108
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	2c e6       	ldi	r18, 0x6C	; 108
 bac:	30 e0       	ldi	r19, 0x00	; 0
 bae:	f9 01       	movw	r30, r18
 bb0:	20 81       	ld	r18, Z
 bb2:	2d 7f       	andi	r18, 0xFD	; 253
 bb4:	fc 01       	movw	r30, r24
 bb6:	20 83       	st	Z, r18
		break;
 bb8:	8d c0       	rjmp	.+282    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 10:PCMSK1=(PCMSK1&(~(1<<PCINT10)));
 bba:	8c e6       	ldi	r24, 0x6C	; 108
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	2c e6       	ldi	r18, 0x6C	; 108
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	f9 01       	movw	r30, r18
 bc4:	20 81       	ld	r18, Z
 bc6:	2b 7f       	andi	r18, 0xFB	; 251
 bc8:	fc 01       	movw	r30, r24
 bca:	20 83       	st	Z, r18
		break;
 bcc:	83 c0       	rjmp	.+262    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 11:PCMSK1=(PCMSK1&(~(1<<PCINT11)));
 bce:	8c e6       	ldi	r24, 0x6C	; 108
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	2c e6       	ldi	r18, 0x6C	; 108
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	f9 01       	movw	r30, r18
 bd8:	20 81       	ld	r18, Z
 bda:	27 7f       	andi	r18, 0xF7	; 247
 bdc:	fc 01       	movw	r30, r24
 bde:	20 83       	st	Z, r18
		break;
 be0:	79 c0       	rjmp	.+242    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 12:PCMSK1=(PCMSK1&(~(1<<PCINT12)));
 be2:	8c e6       	ldi	r24, 0x6C	; 108
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	2c e6       	ldi	r18, 0x6C	; 108
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	f9 01       	movw	r30, r18
 bec:	20 81       	ld	r18, Z
 bee:	2f 7e       	andi	r18, 0xEF	; 239
 bf0:	fc 01       	movw	r30, r24
 bf2:	20 83       	st	Z, r18
		break;
 bf4:	6f c0       	rjmp	.+222    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 13:PCMSK1=(PCMSK1&(~(1<<PCINT13)));
 bf6:	8c e6       	ldi	r24, 0x6C	; 108
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	2c e6       	ldi	r18, 0x6C	; 108
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	f9 01       	movw	r30, r18
 c00:	20 81       	ld	r18, Z
 c02:	2f 7d       	andi	r18, 0xDF	; 223
 c04:	fc 01       	movw	r30, r24
 c06:	20 83       	st	Z, r18
		break;
 c08:	65 c0       	rjmp	.+202    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 14:PCMSK1=(PCMSK1&(~(1<<PCINT14)));
 c0a:	8c e6       	ldi	r24, 0x6C	; 108
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	2c e6       	ldi	r18, 0x6C	; 108
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	f9 01       	movw	r30, r18
 c14:	20 81       	ld	r18, Z
 c16:	2f 7b       	andi	r18, 0xBF	; 191
 c18:	fc 01       	movw	r30, r24
 c1a:	20 83       	st	Z, r18
		break;
 c1c:	5b c0       	rjmp	.+182    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 15:PCMSK1=(PCMSK1&(~(1<<PCINT15)));
 c1e:	8c e6       	ldi	r24, 0x6C	; 108
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	2c e6       	ldi	r18, 0x6C	; 108
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	f9 01       	movw	r30, r18
 c28:	20 81       	ld	r18, Z
 c2a:	2f 77       	andi	r18, 0x7F	; 127
 c2c:	fc 01       	movw	r30, r24
 c2e:	20 83       	st	Z, r18
		break;
 c30:	51 c0       	rjmp	.+162    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 16:PCMSK2=(PCMSK2&(~(1<<PCINT16)));
 c32:	8d e6       	ldi	r24, 0x6D	; 109
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	2d e6       	ldi	r18, 0x6D	; 109
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	f9 01       	movw	r30, r18
 c3c:	20 81       	ld	r18, Z
 c3e:	2e 7f       	andi	r18, 0xFE	; 254
 c40:	fc 01       	movw	r30, r24
 c42:	20 83       	st	Z, r18
		break;
 c44:	47 c0       	rjmp	.+142    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 17:PCMSK2=(PCMSK2&(~(1<<PCINT17)));
 c46:	8d e6       	ldi	r24, 0x6D	; 109
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	2d e6       	ldi	r18, 0x6D	; 109
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	f9 01       	movw	r30, r18
 c50:	20 81       	ld	r18, Z
 c52:	2d 7f       	andi	r18, 0xFD	; 253
 c54:	fc 01       	movw	r30, r24
 c56:	20 83       	st	Z, r18
		break;
 c58:	3d c0       	rjmp	.+122    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 18:PCMSK2=(PCMSK2&(~(1<<PCINT18)));
 c5a:	8d e6       	ldi	r24, 0x6D	; 109
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	2d e6       	ldi	r18, 0x6D	; 109
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	f9 01       	movw	r30, r18
 c64:	20 81       	ld	r18, Z
 c66:	2b 7f       	andi	r18, 0xFB	; 251
 c68:	fc 01       	movw	r30, r24
 c6a:	20 83       	st	Z, r18
		break;
 c6c:	33 c0       	rjmp	.+102    	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 19:PCMSK2=(PCMSK2&(~(1<<PCINT19)));
 c6e:	8d e6       	ldi	r24, 0x6D	; 109
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	2d e6       	ldi	r18, 0x6D	; 109
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	f9 01       	movw	r30, r18
 c78:	20 81       	ld	r18, Z
 c7a:	27 7f       	andi	r18, 0xF7	; 247
 c7c:	fc 01       	movw	r30, r24
 c7e:	20 83       	st	Z, r18
		break;
 c80:	29 c0       	rjmp	.+82     	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 20:PCMSK2=(PCMSK2&(~(1<<PCINT20)));
 c82:	8d e6       	ldi	r24, 0x6D	; 109
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	2d e6       	ldi	r18, 0x6D	; 109
 c88:	30 e0       	ldi	r19, 0x00	; 0
 c8a:	f9 01       	movw	r30, r18
 c8c:	20 81       	ld	r18, Z
 c8e:	2f 7e       	andi	r18, 0xEF	; 239
 c90:	fc 01       	movw	r30, r24
 c92:	20 83       	st	Z, r18
		break;
 c94:	1f c0       	rjmp	.+62     	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 21:PCMSK2=(PCMSK2&(~(1<<PCINT21)));
 c96:	8d e6       	ldi	r24, 0x6D	; 109
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	2d e6       	ldi	r18, 0x6D	; 109
 c9c:	30 e0       	ldi	r19, 0x00	; 0
 c9e:	f9 01       	movw	r30, r18
 ca0:	20 81       	ld	r18, Z
 ca2:	2f 7d       	andi	r18, 0xDF	; 223
 ca4:	fc 01       	movw	r30, r24
 ca6:	20 83       	st	Z, r18
		break;
 ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 22:PCMSK2=(PCMSK2&(~(1<<PCINT22)));
 caa:	8d e6       	ldi	r24, 0x6D	; 109
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	2d e6       	ldi	r18, 0x6D	; 109
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	f9 01       	movw	r30, r18
 cb4:	20 81       	ld	r18, Z
 cb6:	2f 7b       	andi	r18, 0xBF	; 191
 cb8:	fc 01       	movw	r30, r24
 cba:	20 83       	st	Z, r18
		break;
 cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <Disable_Pcinterrupt+0x222>
	case 23:PCMSK2=(PCMSK2&(~(1<<PCINT23)));
 cbe:	8d e6       	ldi	r24, 0x6D	; 109
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	2d e6       	ldi	r18, 0x6D	; 109
 cc4:	30 e0       	ldi	r19, 0x00	; 0
 cc6:	f9 01       	movw	r30, r18
 cc8:	20 81       	ld	r18, Z
 cca:	2f 77       	andi	r18, 0x7F	; 127
 ccc:	fc 01       	movw	r30, r24
 cce:	20 83       	st	Z, r18
		break;
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <Disable_Pcinterrupt+0x222>
	default:break;
 cd2:	00 00       	nop
	}
	if(PCMSK0 == 0x00)
 cd4:	8b e6       	ldi	r24, 0x6B	; 107
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	fc 01       	movw	r30, r24
 cda:	80 81       	ld	r24, Z
 cdc:	88 23       	and	r24, r24
 cde:	51 f4       	brne	.+20     	; 0xcf4 <Disable_Pcinterrupt+0x242>
	{
		PCICR=(PCICR&(~(1<<PCIE0)));
 ce0:	88 e6       	ldi	r24, 0x68	; 104
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	28 e6       	ldi	r18, 0x68	; 104
 ce6:	30 e0       	ldi	r19, 0x00	; 0
 ce8:	f9 01       	movw	r30, r18
 cea:	20 81       	ld	r18, Z
 cec:	2e 7f       	andi	r18, 0xFE	; 254
 cee:	fc 01       	movw	r30, r24
 cf0:	20 83       	st	Z, r18
 cf2:	1f c0       	rjmp	.+62     	; 0xd32 <Disable_Pcinterrupt+0x280>
	}
	else if(PCMSK1 == 0x00)
 cf4:	8c e6       	ldi	r24, 0x6C	; 108
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	fc 01       	movw	r30, r24
 cfa:	80 81       	ld	r24, Z
 cfc:	88 23       	and	r24, r24
 cfe:	51 f4       	brne	.+20     	; 0xd14 <Disable_Pcinterrupt+0x262>
	{
		PCICR=(PCICR&(~(1<<PCIE1)));
 d00:	88 e6       	ldi	r24, 0x68	; 104
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	28 e6       	ldi	r18, 0x68	; 104
 d06:	30 e0       	ldi	r19, 0x00	; 0
 d08:	f9 01       	movw	r30, r18
 d0a:	20 81       	ld	r18, Z
 d0c:	2d 7f       	andi	r18, 0xFD	; 253
 d0e:	fc 01       	movw	r30, r24
 d10:	20 83       	st	Z, r18
 d12:	0f c0       	rjmp	.+30     	; 0xd32 <Disable_Pcinterrupt+0x280>
	}
	else if(PCMSK2 == 0x00)
 d14:	8d e6       	ldi	r24, 0x6D	; 109
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	fc 01       	movw	r30, r24
 d1a:	80 81       	ld	r24, Z
 d1c:	88 23       	and	r24, r24
 d1e:	49 f4       	brne	.+18     	; 0xd32 <Disable_Pcinterrupt+0x280>
	{
		PCICR=(PCICR&(~(1<<PCIE2)));
 d20:	88 e6       	ldi	r24, 0x68	; 104
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	28 e6       	ldi	r18, 0x68	; 104
 d26:	30 e0       	ldi	r19, 0x00	; 0
 d28:	f9 01       	movw	r30, r18
 d2a:	20 81       	ld	r18, Z
 d2c:	2b 7f       	andi	r18, 0xFB	; 251
 d2e:	fc 01       	movw	r30, r24
 d30:	20 83       	st	Z, r18
	}
}
 d32:	0f 90       	pop	r0
 d34:	cf 91       	pop	r28
 d36:	df 91       	pop	r29
 d38:	08 95       	ret

00000d3a <__vector_5>:
//Initialize a global variable for using in delay routines
int i=0;

//Interrupt handler for External interrupt INT4
ISR(INT4_vect)
{
 d3a:	1f 92       	push	r1
 d3c:	0f 92       	push	r0
 d3e:	0f b6       	in	r0, 0x3f	; 63
 d40:	0f 92       	push	r0
 d42:	00 90 5b 00 	lds	r0, 0x005B
 d46:	0f 92       	push	r0
 d48:	11 24       	eor	r1, r1
 d4a:	2f 93       	push	r18
 d4c:	3f 93       	push	r19
 d4e:	8f 93       	push	r24
 d50:	9f 93       	push	r25
 d52:	ef 93       	push	r30
 d54:	ff 93       	push	r31
 d56:	df 93       	push	r29
 d58:	cf 93       	push	r28
 d5a:	cd b7       	in	r28, 0x3d	; 61
 d5c:	de b7       	in	r29, 0x3e	; 62
	//Turn on LED0
	PORTA=(PORTA&(~(1<<PA0)))|(0<<PA0);	
 d5e:	82 e2       	ldi	r24, 0x22	; 34
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	22 e2       	ldi	r18, 0x22	; 34
 d64:	30 e0       	ldi	r19, 0x00	; 0
 d66:	f9 01       	movw	r30, r18
 d68:	20 81       	ld	r18, Z
 d6a:	2e 7f       	andi	r18, 0xFE	; 254
 d6c:	fc 01       	movw	r30, r24
 d6e:	20 83       	st	Z, r18
	//Wait for some delay
	for(i=0;i<10000;i++);	
 d70:	10 92 01 02 	sts	0x0201, r1
 d74:	10 92 00 02 	sts	0x0200, r1
 d78:	09 c0       	rjmp	.+18     	; 0xd8c <__vector_5+0x52>
 d7a:	80 91 00 02 	lds	r24, 0x0200
 d7e:	90 91 01 02 	lds	r25, 0x0201
 d82:	01 96       	adiw	r24, 0x01	; 1
 d84:	90 93 01 02 	sts	0x0201, r25
 d88:	80 93 00 02 	sts	0x0200, r24
 d8c:	80 91 00 02 	lds	r24, 0x0200
 d90:	90 91 01 02 	lds	r25, 0x0201
 d94:	f7 e2       	ldi	r31, 0x27	; 39
 d96:	80 31       	cpi	r24, 0x10	; 16
 d98:	9f 07       	cpc	r25, r31
 d9a:	7c f3       	brlt	.-34     	; 0xd7a <__vector_5+0x40>
	//Turn off LED0	
	PORTA=(PORTA&(~(1<<PA0)))|(1<<PA0);	
 d9c:	82 e2       	ldi	r24, 0x22	; 34
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	22 e2       	ldi	r18, 0x22	; 34
 da2:	30 e0       	ldi	r19, 0x00	; 0
 da4:	f9 01       	movw	r30, r18
 da6:	20 81       	ld	r18, Z
 da8:	21 60       	ori	r18, 0x01	; 1
 daa:	fc 01       	movw	r30, r24
 dac:	20 83       	st	Z, r18
}
 dae:	cf 91       	pop	r28
 db0:	df 91       	pop	r29
 db2:	ff 91       	pop	r31
 db4:	ef 91       	pop	r30
 db6:	9f 91       	pop	r25
 db8:	8f 91       	pop	r24
 dba:	3f 91       	pop	r19
 dbc:	2f 91       	pop	r18
 dbe:	0f 90       	pop	r0
 dc0:	00 92 5b 00 	sts	0x005B, r0
 dc4:	0f 90       	pop	r0
 dc6:	0f be       	out	0x3f, r0	; 63
 dc8:	0f 90       	pop	r0
 dca:	1f 90       	pop	r1
 dcc:	18 95       	reti

00000dce <Timer_Init>:

//Function for Timer3 initialization
void Timer_Init()
{
 dce:	df 93       	push	r29
 dd0:	cf 93       	push	r28
 dd2:	cd b7       	in	r28, 0x3d	; 61
 dd4:	de b7       	in	r29, 0x3e	; 62
	//Configure PORTE pin4 (INT4 pin/OC3B pin) as output
	DDRE=(DDRE&(~(1<<DDE4)))|(1<<DDE4);	
 dd6:	8d e2       	ldi	r24, 0x2D	; 45
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	2d e2       	ldi	r18, 0x2D	; 45
 ddc:	30 e0       	ldi	r19, 0x00	; 0
 dde:	f9 01       	movw	r30, r18
 de0:	20 81       	ld	r18, Z
 de2:	20 61       	ori	r18, 0x10	; 16
 de4:	fc 01       	movw	r30, r24
 de6:	20 83       	st	Z, r18
	//Configure Timer3 in CTC mode with OC3B pin toggling at compare match
	TCCR3A = (1<<COM3B0);	
 de8:	80 e9       	ldi	r24, 0x90	; 144
 dea:	90 e0       	ldi	r25, 0x00	; 0
 dec:	20 e1       	ldi	r18, 0x10	; 16
 dee:	fc 01       	movw	r30, r24
 df0:	20 83       	st	Z, r18
	//Load some compare value
	OCR3A = 0x7FFF;	
 df2:	88 e9       	ldi	r24, 0x98	; 152
 df4:	90 e0       	ldi	r25, 0x00	; 0
 df6:	2f ef       	ldi	r18, 0xFF	; 255
 df8:	3f e7       	ldi	r19, 0x7F	; 127
 dfa:	fc 01       	movw	r30, r24
 dfc:	31 83       	std	Z+1, r19	; 0x01
 dfe:	20 83       	st	Z, r18
	//Timer3 in CTC mode (OCR3A as TOP) and prescalar (divide by 256)
	TCCR3B = (1<<WGM32)|(0<<CS32)|(1<<CS31)|(1<<CS30);	
 e00:	81 e9       	ldi	r24, 0x91	; 145
 e02:	90 e0       	ldi	r25, 0x00	; 0
 e04:	2b e0       	ldi	r18, 0x0B	; 11
 e06:	fc 01       	movw	r30, r24
 e08:	20 83       	st	Z, r18
}
 e0a:	cf 91       	pop	r28
 e0c:	df 91       	pop	r29
 e0e:	08 95       	ret

00000e10 <main>:

int main(void)
{
 e10:	df 93       	push	r29
 e12:	cf 93       	push	r28
 e14:	cd b7       	in	r28, 0x3d	; 61
 e16:	de b7       	in	r29, 0x3e	; 62
	//Configure PORTA BIT0 as output to drive LED0
	DDRA=(DDRA&(~(1<<DDA0)))|(1<<DDA0);	
 e18:	81 e2       	ldi	r24, 0x21	; 33
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	21 e2       	ldi	r18, 0x21	; 33
 e1e:	30 e0       	ldi	r19, 0x00	; 0
 e20:	f9 01       	movw	r30, r18
 e22:	20 81       	ld	r18, Z
 e24:	21 60       	ori	r18, 0x01	; 1
 e26:	fc 01       	movw	r30, r24
 e28:	20 83       	st	Z, r18
	//Turn off LED0
	PORTA=(PORTA&(~(1<<PA0)))|(1<<PA0);	
 e2a:	82 e2       	ldi	r24, 0x22	; 34
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	22 e2       	ldi	r18, 0x22	; 34
 e30:	30 e0       	ldi	r19, 0x00	; 0
 e32:	f9 01       	movw	r30, r18
 e34:	20 81       	ld	r18, Z
 e36:	21 60       	ori	r18, 0x01	; 1
 e38:	fc 01       	movw	r30, r24
 e3a:	20 83       	st	Z, r18

	//Configure INT4 to sense rising edge
	Configure_Interrupt(INTR4,RISING);	
 e3c:	84 e0       	ldi	r24, 0x04	; 4
 e3e:	63 e0       	ldi	r22, 0x03	; 3
 e40:	0e 94 ab 00 	call	0x156	; 0x156 <Configure_Interrupt>
	//Enable INT4
	Enable_Interrupt(INTR4);
 e44:	84 e0       	ldi	r24, 0x04	; 4
 e46:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Enable_Interrupt>
	//Set global interrupt enable bit
	sei();	
 e4a:	78 94       	sei
	
	//Initialize Timer3
	Timer_Init();
 e4c:	0e 94 e7 06 	call	0xdce	; 0xdce <Timer_Init>
	
    while(1)
    {
        //Empty loop - Wait forever until interrupt occurs 
    }
 e50:	ff cf       	rjmp	.-2      	; 0xe50 <main+0x40>

00000e52 <_exit>:
 e52:	ff cf       	rjmp	.-2      	; 0xe52 <_exit>
