
Controller_Driver_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000118  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000153  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ce  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000083  00000000  00000000  00000437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001eb  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  9e:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12Button_Pressh>:
	return 0;
	
}

unsigned char Button_Press(unsigned char Button_Value)
{
  a6:	e1 e1       	ldi	r30, 0x11	; 17
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	a8 e0       	ldi	r26, 0x08	; 8
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	29 e0       	ldi	r18, 0x09	; 9
  b0:	31 e0       	ldi	r19, 0x01	; 1
	unsigned char Output=0x00;
	int i;
	
	for (i=7;i>=0;i--)
	{
		if (Button_Value==Buttons[i])
  b2:	92 91       	ld	r25, -Z
  b4:	98 13       	cpse	r25, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_Z12Button_Pressh+0x16>
		{
			PORTB=Output_Test[i];
  b8:	9c 91       	ld	r25, X
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	11 97       	sbiw	r26, 0x01	; 1
unsigned char Button_Press(unsigned char Button_Value)
{
	unsigned char Output=0x00;
	int i;
	
	for (i=7;i>=0;i--)
  be:	e2 17       	cp	r30, r18
  c0:	f3 07       	cpc	r31, r19
  c2:	b9 f7       	brne	.-18     	; 0xb2 <_Z12Button_Pressh+0xc>
		//write 0x000 portb3-portb4
		
		PORTB=0x00;
	}*/
	return Output;
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret

000000c8 <main>:


int main(void)
{
    //setting PB0-2 and B6-7 as inputs and PB3-5 as outputs
	DDRB= 0b00111000;
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	84 b9       	out	0x04, r24	; 4
	
while(1)
    {
		Current_Read=PINB; //reading pins
  cc:	83 b1       	in	r24, 0x03	; 3
		Current_Read= Current_Read & 0b00000111; //masking pins that don't matter
  ce:	87 70       	andi	r24, 0x07	; 7
  d0:	80 93 14 01 	sts	0x0114, r24
		//this check will check the previous status of the pins for debouncing 
		if (Current_Read==Previous_Read)
  d4:	90 91 00 01 	lds	r25, 0x0100
  d8:	89 13       	cpse	r24, r25
  da:	17 c0       	rjmp	.+46     	; 0x10a <main+0x42>
		{
			//if the previous state equals current increase confidence level
			Confidence_Level++;
  dc:	20 91 12 01 	lds	r18, 0x0112
  e0:	30 91 13 01 	lds	r19, 0x0113
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	30 93 13 01 	sts	0x0113, r19
  ec:	20 93 12 01 	sts	0x0112, r18
			if(Confidence_Level>200) //arbitrary confidence level
  f0:	20 91 12 01 	lds	r18, 0x0112
  f4:	30 91 13 01 	lds	r19, 0x0113
  f8:	29 3c       	cpi	r18, 0xC9	; 201
  fa:	31 05       	cpc	r19, r1
  fc:	34 f0       	brlt	.+12     	; 0x10a <main+0x42>
			{
				Button_Press(Current_Read);
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12Button_Pressh>
				Confidence_Level=0; //reset counter
 102:	10 92 13 01 	sts	0x0113, r1
 106:	10 92 12 01 	sts	0x0112, r1
			}
		}
		Previous_Read=Current_Read; //store current state
 10a:	80 91 14 01 	lds	r24, 0x0114
 10e:	80 93 00 01 	sts	0x0100, r24
volatile int  Confidence_Level = 0;




int main(void)
 112:	dc cf       	rjmp	.-72     	; 0xcc <main+0x4>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
