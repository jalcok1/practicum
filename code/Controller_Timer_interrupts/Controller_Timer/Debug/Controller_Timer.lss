
Controller_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001b6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ab  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fc  00000000  00000000  0000046f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000b6  00000000  00000000  0000056b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fa  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
volatile int  Confidence_Level = 0;

//interrupt routine to handle SELECT button press
// toggles arbitrary LED on and off for debug
ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	int k=0;
	PORTB ^= (1<<PORTB3); //toggle LED
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	89 27       	eor	r24, r25
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	88 ee       	ldi	r24, 0xE8	; 232
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	01 97       	sbiw	r24, 0x01	; 1
	//counter for debounce
	for (k=0;k<1000;k++);
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	e9 f7       	brne	.-6      	; 0xc0 <__vector_1+0x1a>
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_11>:

//interrupt routine for internal counter.this will be used as our 
//time out counter.
ISR(TIMER1_COMPA_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	PORTB ^= 1<<PORTB4;
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	89 27       	eor	r24, r25
  e8:	85 b9       	out	0x05, r24	; 5
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <_Z12Button_Pressh>:
/*This function takes the current state of the encoder and outputs 
the corresponding hex value to print out the user input to the LCD
Input: current state of encoder
Output: Hex value that will be sent to LCD*/
unsigned char Button_Press(unsigned char Button_Value)
{
  f8:	e1 e1       	ldi	r30, 0x11	; 17
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	a8 e0       	ldi	r26, 0x08	; 8
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	29 e0       	ldi	r18, 0x09	; 9
 102:	31 e0       	ldi	r19, 0x01	; 1
	unsigned char Output=0x00;
	int i;
	for (i=7;i>=0;i--)
	{
		if (Button_Value==Buttons[i])
 104:	92 91       	ld	r25, -Z
 106:	98 13       	cpse	r25, r24
 108:	07 c0       	rjmp	.+14     	; 0x118 <_Z12Button_Pressh+0x20>
		{
			
			PORTB=PORTB & 0b11111000; //masking other values of PORTB
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	98 7f       	andi	r25, 0xF8	; 248
 10e:	95 b9       	out	0x05, r25	; 5
			PORTB=PORTB | Output_Debug[i]; //writing to PRTB0-2
 110:	45 b1       	in	r20, 0x05	; 5
 112:	9c 91       	ld	r25, X
 114:	94 2b       	or	r25, r20
 116:	95 b9       	out	0x05, r25	; 5
 118:	11 97       	sbiw	r26, 0x01	; 1
Output: Hex value that will be sent to LCD*/
unsigned char Button_Press(unsigned char Button_Value)
{
	unsigned char Output=0x00;
	int i;
	for (i=7;i>=0;i--)
 11a:	e2 17       	cp	r30, r18
 11c:	f3 07       	cpc	r31, r19
 11e:	91 f7       	brne	.-28     	; 0x104 <_Z12Button_Pressh+0xc>
			PORTB=PORTB | Output_Debug[i]; //writing to PRTB0-2
		
		}
	}
	return Output;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret

00000124 <main>:


int main(void)
{
    //setting PBC0-PC3 as inputs
	DDRC &= ~((1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3));//all port B as inputs
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3));//enable pull-ups
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	88 b9       	out	0x08, r24	; 8

	
	DDRB |= ((1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB4)); //pin PB0-PB3 as outputs
 130:	84 b1       	in	r24, 0x04	; 4
 132:	8f 61       	ori	r24, 0x1F	; 31
 134:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;// all off
 136:	15 b8       	out	0x05, r1	; 5
	 
	
	//configuring interrupt INT0
	DDRD &= ~(1<<DDD2); //PD2 as input
 138:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2); //enable pull-up on PD2
 13a:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1<<ISC01); //set interrupt on INT0 falling edge
 13c:	e9 e6       	ldi	r30, 0x69	; 105
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); //enable interrupt on INT0
 146:	e8 9a       	sbi	0x1d, 0	; 29
	
	//timer setup
	//set prescale-divide clock by 1024 and enable clear after match
	//so counter runs at ~1kHz.
	TCCR1B |= (1<<CS12 | 1<<CS10 | 1<<WGM12); 
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8d 60       	ori	r24, 0x0D	; 13
 150:	80 83       	st	Z, r24
	TIMSK1 |= 1<<OCIE1A; //enable interrupt for counter
 152:	ef e6       	ldi	r30, 0x6F	; 111
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
	OCR1A = 3000; // set value for counter every 1000=~ 1second
 15c:	88 eb       	ldi	r24, 0xB8	; 184
 15e:	9b e0       	ldi	r25, 0x0B	; 11
 160:	90 93 89 00 	sts	0x0089, r25
 164:	80 93 88 00 	sts	0x0088, r24
	
	sei(); //enable global interrupts
 168:	78 94       	sei
	
while(1)
    {
		Current_Read=PINC; //reading pins
 16a:	86 b1       	in	r24, 0x06	; 6
		Current_Read= Current_Read & 0b00000111; //masking pins that don't matter
 16c:	87 70       	andi	r24, 0x07	; 7
 16e:	80 93 14 01 	sts	0x0114, r24
		//this check will check the previous status of the pins for debouncing 
		if (Current_Read==Previous_Read)
 172:	90 91 00 01 	lds	r25, 0x0100
 176:	89 13       	cpse	r24, r25
 178:	17 c0       	rjmp	.+46     	; 0x1a8 <main+0x84>
		{
			//if the previous state equals current increase confidence level
			Confidence_Level++;
 17a:	20 91 12 01 	lds	r18, 0x0112
 17e:	30 91 13 01 	lds	r19, 0x0113
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	30 93 13 01 	sts	0x0113, r19
 18a:	20 93 12 01 	sts	0x0112, r18
			if(Confidence_Level>200) //arbitrary confidence level
 18e:	20 91 12 01 	lds	r18, 0x0112
 192:	30 91 13 01 	lds	r19, 0x0113
 196:	29 3c       	cpi	r18, 0xC9	; 201
 198:	31 05       	cpc	r19, r1
 19a:	34 f0       	brlt	.+12     	; 0x1a8 <main+0x84>
			{
				Button_Press(Current_Read);
 19c:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z12Button_Pressh>
				Confidence_Level=0; //reset counter
 1a0:	10 92 13 01 	sts	0x0113, r1
 1a4:	10 92 12 01 	sts	0x0112, r1
			}
		}
		Previous_Read=Current_Read; //store current state	
 1a8:	80 91 14 01 	lds	r24, 0x0114
 1ac:	80 93 00 01 	sts	0x0100, r24
{
	PORTB ^= 1<<PORTB4;
}


int main(void)
 1b0:	dc cf       	rjmp	.-72     	; 0x16a <main+0x46>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
